// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: payloads.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_payloads_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_payloads_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021009 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "gogo.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_payloads_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_payloads_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_payloads_2eproto;
namespace payloads {
class Message;
struct MessageDefaultTypeInternal;
extern MessageDefaultTypeInternal _Message_default_instance_;
class Payload;
struct PayloadDefaultTypeInternal;
extern PayloadDefaultTypeInternal _Payload_default_instance_;
class TextData;
struct TextDataDefaultTypeInternal;
extern TextDataDefaultTypeInternal _TextData_default_instance_;
}  // namespace payloads
PROTOBUF_NAMESPACE_OPEN
template<> ::payloads::Message* Arena::CreateMaybeMessage<::payloads::Message>(Arena*);
template<> ::payloads::Payload* Arena::CreateMaybeMessage<::payloads::Payload>(Arena*);
template<> ::payloads::TextData* Arena::CreateMaybeMessage<::payloads::TextData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace payloads {

enum PayloadType : int {
  BINARY = 0,
  TEXT = 1,
  ACK = 2,
  SESSION = 3,
  PayloadType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  PayloadType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool PayloadType_IsValid(int value);
constexpr PayloadType PayloadType_MIN = BINARY;
constexpr PayloadType PayloadType_MAX = SESSION;
constexpr int PayloadType_ARRAYSIZE = PayloadType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PayloadType_descriptor();
template<typename T>
inline const std::string& PayloadType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PayloadType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PayloadType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PayloadType_descriptor(), enum_t_value);
}
inline bool PayloadType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PayloadType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PayloadType>(
    PayloadType_descriptor(), name, value);
}
// ===================================================================

class Message final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:payloads.Message) */ {
 public:
  inline Message() : Message(nullptr) {}
  ~Message() override;
  explicit PROTOBUF_CONSTEXPR Message(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Message(const Message& from);
  Message(Message&& from) noexcept
    : Message() {
    *this = ::std::move(from);
  }

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message& operator=(Message&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message* internal_default_instance() {
    return reinterpret_cast<const Message*>(
               &_Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Message& a, Message& b) {
    a.Swap(&b);
  }
  inline void Swap(Message* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Message>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Message& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Message& from) {
    Message::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "payloads.Message";
  }
  protected:
  explicit Message(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPayloadFieldNumber = 1,
    kNonceFieldNumber = 3,
    kEncryptedKeyFieldNumber = 4,
    kEncryptedFieldNumber = 2,
  };
  // bytes payload = 1;
  void clear_payload();
  const std::string& payload() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_payload(ArgT0&& arg0, ArgT... args);
  std::string* mutable_payload();
  PROTOBUF_NODISCARD std::string* release_payload();
  void set_allocated_payload(std::string* payload);
  private:
  const std::string& _internal_payload() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_payload(const std::string& value);
  std::string* _internal_mutable_payload();
  public:

  // bytes nonce = 3;
  void clear_nonce();
  const std::string& nonce() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nonce(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nonce();
  PROTOBUF_NODISCARD std::string* release_nonce();
  void set_allocated_nonce(std::string* nonce);
  private:
  const std::string& _internal_nonce() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nonce(const std::string& value);
  std::string* _internal_mutable_nonce();
  public:

  // bytes encrypted_key = 4;
  void clear_encrypted_key();
  const std::string& encrypted_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_encrypted_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_encrypted_key();
  PROTOBUF_NODISCARD std::string* release_encrypted_key();
  void set_allocated_encrypted_key(std::string* encrypted_key);
  private:
  const std::string& _internal_encrypted_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_encrypted_key(const std::string& value);
  std::string* _internal_mutable_encrypted_key();
  public:

  // bool encrypted = 2;
  void clear_encrypted();
  bool encrypted() const;
  void set_encrypted(bool value);
  private:
  bool _internal_encrypted() const;
  void _internal_set_encrypted(bool value);
  public:

  // @@protoc_insertion_point(class_scope:payloads.Message)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nonce_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr encrypted_key_;
    bool encrypted_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_payloads_2eproto;
};
// -------------------------------------------------------------------

class Payload final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:payloads.Payload) */ {
 public:
  inline Payload() : Payload(nullptr) {}
  ~Payload() override;
  explicit PROTOBUF_CONSTEXPR Payload(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Payload(const Payload& from);
  Payload(Payload&& from) noexcept
    : Payload() {
    *this = ::std::move(from);
  }

  inline Payload& operator=(const Payload& from) {
    CopyFrom(from);
    return *this;
  }
  inline Payload& operator=(Payload&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Payload& default_instance() {
    return *internal_default_instance();
  }
  static inline const Payload* internal_default_instance() {
    return reinterpret_cast<const Payload*>(
               &_Payload_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Payload& a, Payload& b) {
    a.Swap(&b);
  }
  inline void Swap(Payload* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Payload* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Payload* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Payload>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Payload& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Payload& from) {
    Payload::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Payload* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "payloads.Payload";
  }
  protected:
  explicit Payload(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageIdFieldNumber = 2,
    kDataFieldNumber = 3,
    kReplyToIdFieldNumber = 4,
    kTypeFieldNumber = 1,
    kNoReplyFieldNumber = 5,
  };
  // bytes message_id = 2;
  void clear_message_id();
  const std::string& message_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message_id();
  PROTOBUF_NODISCARD std::string* release_message_id();
  void set_allocated_message_id(std::string* message_id);
  private:
  const std::string& _internal_message_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message_id(const std::string& value);
  std::string* _internal_mutable_message_id();
  public:

  // bytes data = 3;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // bytes reply_to_id = 4;
  void clear_reply_to_id();
  const std::string& reply_to_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reply_to_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reply_to_id();
  PROTOBUF_NODISCARD std::string* release_reply_to_id();
  void set_allocated_reply_to_id(std::string* reply_to_id);
  private:
  const std::string& _internal_reply_to_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reply_to_id(const std::string& value);
  std::string* _internal_mutable_reply_to_id();
  public:

  // .payloads.PayloadType type = 1;
  void clear_type();
  ::payloads::PayloadType type() const;
  void set_type(::payloads::PayloadType value);
  private:
  ::payloads::PayloadType _internal_type() const;
  void _internal_set_type(::payloads::PayloadType value);
  public:

  // bool no_reply = 5;
  void clear_no_reply();
  bool no_reply() const;
  void set_no_reply(bool value);
  private:
  bool _internal_no_reply() const;
  void _internal_set_no_reply(bool value);
  public:

  // @@protoc_insertion_point(class_scope:payloads.Payload)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reply_to_id_;
    int type_;
    bool no_reply_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_payloads_2eproto;
};
// -------------------------------------------------------------------

class TextData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:payloads.TextData) */ {
 public:
  inline TextData() : TextData(nullptr) {}
  ~TextData() override;
  explicit PROTOBUF_CONSTEXPR TextData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TextData(const TextData& from);
  TextData(TextData&& from) noexcept
    : TextData() {
    *this = ::std::move(from);
  }

  inline TextData& operator=(const TextData& from) {
    CopyFrom(from);
    return *this;
  }
  inline TextData& operator=(TextData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TextData& default_instance() {
    return *internal_default_instance();
  }
  static inline const TextData* internal_default_instance() {
    return reinterpret_cast<const TextData*>(
               &_TextData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TextData& a, TextData& b) {
    a.Swap(&b);
  }
  inline void Swap(TextData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TextData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TextData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TextData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TextData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TextData& from) {
    TextData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TextData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "payloads.TextData";
  }
  protected:
  explicit TextData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextFieldNumber = 1,
  };
  // string text = 1;
  void clear_text();
  const std::string& text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_text();
  PROTOBUF_NODISCARD std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // @@protoc_insertion_point(class_scope:payloads.TextData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_payloads_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Message

// bytes payload = 1;
inline void Message::clear_payload() {
  _impl_.payload_.ClearToEmpty();
}
inline const std::string& Message::payload() const {
  // @@protoc_insertion_point(field_get:payloads.Message.payload)
  return _internal_payload();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Message::set_payload(ArgT0&& arg0, ArgT... args) {
 
 _impl_.payload_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:payloads.Message.payload)
}
inline std::string* Message::mutable_payload() {
  std::string* _s = _internal_mutable_payload();
  // @@protoc_insertion_point(field_mutable:payloads.Message.payload)
  return _s;
}
inline const std::string& Message::_internal_payload() const {
  return _impl_.payload_.Get();
}
inline void Message::_internal_set_payload(const std::string& value) {
  
  _impl_.payload_.Set(value, GetArenaForAllocation());
}
inline std::string* Message::_internal_mutable_payload() {
  
  return _impl_.payload_.Mutable(GetArenaForAllocation());
}
inline std::string* Message::release_payload() {
  // @@protoc_insertion_point(field_release:payloads.Message.payload)
  return _impl_.payload_.Release();
}
inline void Message::set_allocated_payload(std::string* payload) {
  if (payload != nullptr) {
    
  } else {
    
  }
  _impl_.payload_.SetAllocated(payload, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.payload_.IsDefault()) {
    _impl_.payload_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:payloads.Message.payload)
}

// bool encrypted = 2;
inline void Message::clear_encrypted() {
  _impl_.encrypted_ = false;
}
inline bool Message::_internal_encrypted() const {
  return _impl_.encrypted_;
}
inline bool Message::encrypted() const {
  // @@protoc_insertion_point(field_get:payloads.Message.encrypted)
  return _internal_encrypted();
}
inline void Message::_internal_set_encrypted(bool value) {
  
  _impl_.encrypted_ = value;
}
inline void Message::set_encrypted(bool value) {
  _internal_set_encrypted(value);
  // @@protoc_insertion_point(field_set:payloads.Message.encrypted)
}

// bytes nonce = 3;
inline void Message::clear_nonce() {
  _impl_.nonce_.ClearToEmpty();
}
inline const std::string& Message::nonce() const {
  // @@protoc_insertion_point(field_get:payloads.Message.nonce)
  return _internal_nonce();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Message::set_nonce(ArgT0&& arg0, ArgT... args) {
 
 _impl_.nonce_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:payloads.Message.nonce)
}
inline std::string* Message::mutable_nonce() {
  std::string* _s = _internal_mutable_nonce();
  // @@protoc_insertion_point(field_mutable:payloads.Message.nonce)
  return _s;
}
inline const std::string& Message::_internal_nonce() const {
  return _impl_.nonce_.Get();
}
inline void Message::_internal_set_nonce(const std::string& value) {
  
  _impl_.nonce_.Set(value, GetArenaForAllocation());
}
inline std::string* Message::_internal_mutable_nonce() {
  
  return _impl_.nonce_.Mutable(GetArenaForAllocation());
}
inline std::string* Message::release_nonce() {
  // @@protoc_insertion_point(field_release:payloads.Message.nonce)
  return _impl_.nonce_.Release();
}
inline void Message::set_allocated_nonce(std::string* nonce) {
  if (nonce != nullptr) {
    
  } else {
    
  }
  _impl_.nonce_.SetAllocated(nonce, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.nonce_.IsDefault()) {
    _impl_.nonce_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:payloads.Message.nonce)
}

// bytes encrypted_key = 4;
inline void Message::clear_encrypted_key() {
  _impl_.encrypted_key_.ClearToEmpty();
}
inline const std::string& Message::encrypted_key() const {
  // @@protoc_insertion_point(field_get:payloads.Message.encrypted_key)
  return _internal_encrypted_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Message::set_encrypted_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.encrypted_key_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:payloads.Message.encrypted_key)
}
inline std::string* Message::mutable_encrypted_key() {
  std::string* _s = _internal_mutable_encrypted_key();
  // @@protoc_insertion_point(field_mutable:payloads.Message.encrypted_key)
  return _s;
}
inline const std::string& Message::_internal_encrypted_key() const {
  return _impl_.encrypted_key_.Get();
}
inline void Message::_internal_set_encrypted_key(const std::string& value) {
  
  _impl_.encrypted_key_.Set(value, GetArenaForAllocation());
}
inline std::string* Message::_internal_mutable_encrypted_key() {
  
  return _impl_.encrypted_key_.Mutable(GetArenaForAllocation());
}
inline std::string* Message::release_encrypted_key() {
  // @@protoc_insertion_point(field_release:payloads.Message.encrypted_key)
  return _impl_.encrypted_key_.Release();
}
inline void Message::set_allocated_encrypted_key(std::string* encrypted_key) {
  if (encrypted_key != nullptr) {
    
  } else {
    
  }
  _impl_.encrypted_key_.SetAllocated(encrypted_key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.encrypted_key_.IsDefault()) {
    _impl_.encrypted_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:payloads.Message.encrypted_key)
}

// -------------------------------------------------------------------

// Payload

// .payloads.PayloadType type = 1;
inline void Payload::clear_type() {
  _impl_.type_ = 0;
}
inline ::payloads::PayloadType Payload::_internal_type() const {
  return static_cast< ::payloads::PayloadType >(_impl_.type_);
}
inline ::payloads::PayloadType Payload::type() const {
  // @@protoc_insertion_point(field_get:payloads.Payload.type)
  return _internal_type();
}
inline void Payload::_internal_set_type(::payloads::PayloadType value) {
  
  _impl_.type_ = value;
}
inline void Payload::set_type(::payloads::PayloadType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:payloads.Payload.type)
}

// bytes message_id = 2;
inline void Payload::clear_message_id() {
  _impl_.message_id_.ClearToEmpty();
}
inline const std::string& Payload::message_id() const {
  // @@protoc_insertion_point(field_get:payloads.Payload.message_id)
  return _internal_message_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Payload::set_message_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.message_id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:payloads.Payload.message_id)
}
inline std::string* Payload::mutable_message_id() {
  std::string* _s = _internal_mutable_message_id();
  // @@protoc_insertion_point(field_mutable:payloads.Payload.message_id)
  return _s;
}
inline const std::string& Payload::_internal_message_id() const {
  return _impl_.message_id_.Get();
}
inline void Payload::_internal_set_message_id(const std::string& value) {
  
  _impl_.message_id_.Set(value, GetArenaForAllocation());
}
inline std::string* Payload::_internal_mutable_message_id() {
  
  return _impl_.message_id_.Mutable(GetArenaForAllocation());
}
inline std::string* Payload::release_message_id() {
  // @@protoc_insertion_point(field_release:payloads.Payload.message_id)
  return _impl_.message_id_.Release();
}
inline void Payload::set_allocated_message_id(std::string* message_id) {
  if (message_id != nullptr) {
    
  } else {
    
  }
  _impl_.message_id_.SetAllocated(message_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_id_.IsDefault()) {
    _impl_.message_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:payloads.Payload.message_id)
}

// bytes data = 3;
inline void Payload::clear_data() {
  _impl_.data_.ClearToEmpty();
}
inline const std::string& Payload::data() const {
  // @@protoc_insertion_point(field_get:payloads.Payload.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Payload::set_data(ArgT0&& arg0, ArgT... args) {
 
 _impl_.data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:payloads.Payload.data)
}
inline std::string* Payload::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:payloads.Payload.data)
  return _s;
}
inline const std::string& Payload::_internal_data() const {
  return _impl_.data_.Get();
}
inline void Payload::_internal_set_data(const std::string& value) {
  
  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* Payload::_internal_mutable_data() {
  
  return _impl_.data_.Mutable(GetArenaForAllocation());
}
inline std::string* Payload::release_data() {
  // @@protoc_insertion_point(field_release:payloads.Payload.data)
  return _impl_.data_.Release();
}
inline void Payload::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  _impl_.data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:payloads.Payload.data)
}

// bytes reply_to_id = 4;
inline void Payload::clear_reply_to_id() {
  _impl_.reply_to_id_.ClearToEmpty();
}
inline const std::string& Payload::reply_to_id() const {
  // @@protoc_insertion_point(field_get:payloads.Payload.reply_to_id)
  return _internal_reply_to_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Payload::set_reply_to_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.reply_to_id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:payloads.Payload.reply_to_id)
}
inline std::string* Payload::mutable_reply_to_id() {
  std::string* _s = _internal_mutable_reply_to_id();
  // @@protoc_insertion_point(field_mutable:payloads.Payload.reply_to_id)
  return _s;
}
inline const std::string& Payload::_internal_reply_to_id() const {
  return _impl_.reply_to_id_.Get();
}
inline void Payload::_internal_set_reply_to_id(const std::string& value) {
  
  _impl_.reply_to_id_.Set(value, GetArenaForAllocation());
}
inline std::string* Payload::_internal_mutable_reply_to_id() {
  
  return _impl_.reply_to_id_.Mutable(GetArenaForAllocation());
}
inline std::string* Payload::release_reply_to_id() {
  // @@protoc_insertion_point(field_release:payloads.Payload.reply_to_id)
  return _impl_.reply_to_id_.Release();
}
inline void Payload::set_allocated_reply_to_id(std::string* reply_to_id) {
  if (reply_to_id != nullptr) {
    
  } else {
    
  }
  _impl_.reply_to_id_.SetAllocated(reply_to_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.reply_to_id_.IsDefault()) {
    _impl_.reply_to_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:payloads.Payload.reply_to_id)
}

// bool no_reply = 5;
inline void Payload::clear_no_reply() {
  _impl_.no_reply_ = false;
}
inline bool Payload::_internal_no_reply() const {
  return _impl_.no_reply_;
}
inline bool Payload::no_reply() const {
  // @@protoc_insertion_point(field_get:payloads.Payload.no_reply)
  return _internal_no_reply();
}
inline void Payload::_internal_set_no_reply(bool value) {
  
  _impl_.no_reply_ = value;
}
inline void Payload::set_no_reply(bool value) {
  _internal_set_no_reply(value);
  // @@protoc_insertion_point(field_set:payloads.Payload.no_reply)
}

// -------------------------------------------------------------------

// TextData

// string text = 1;
inline void TextData::clear_text() {
  _impl_.text_.ClearToEmpty();
}
inline const std::string& TextData::text() const {
  // @@protoc_insertion_point(field_get:payloads.TextData.text)
  return _internal_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TextData::set_text(ArgT0&& arg0, ArgT... args) {
 
 _impl_.text_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:payloads.TextData.text)
}
inline std::string* TextData::mutable_text() {
  std::string* _s = _internal_mutable_text();
  // @@protoc_insertion_point(field_mutable:payloads.TextData.text)
  return _s;
}
inline const std::string& TextData::_internal_text() const {
  return _impl_.text_.Get();
}
inline void TextData::_internal_set_text(const std::string& value) {
  
  _impl_.text_.Set(value, GetArenaForAllocation());
}
inline std::string* TextData::_internal_mutable_text() {
  
  return _impl_.text_.Mutable(GetArenaForAllocation());
}
inline std::string* TextData::release_text() {
  // @@protoc_insertion_point(field_release:payloads.TextData.text)
  return _impl_.text_.Release();
}
inline void TextData::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  _impl_.text_.SetAllocated(text, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.text_.IsDefault()) {
    _impl_.text_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:payloads.TextData.text)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace payloads

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::payloads::PayloadType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::payloads::PayloadType>() {
  return ::payloads::PayloadType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_payloads_2eproto
