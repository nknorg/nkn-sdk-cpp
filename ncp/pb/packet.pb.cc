// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ncp/pb/packet.proto

#include "ncp/pb/packet.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace pb {
PROTOBUF_CONSTEXPR Packet::Packet(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ack_start_seq_)*/{}
  , /*decltype(_impl_._ack_start_seq_cached_byte_size_)*/{0}
  , /*decltype(_impl_.ack_seq_count_)*/{}
  , /*decltype(_impl_._ack_seq_count_cached_byte_size_)*/{0}
  , /*decltype(_impl_.client_ids_)*/{}
  , /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sequence_id_)*/0u
  , /*decltype(_impl_.window_size_)*/0u
  , /*decltype(_impl_.bytes_read_)*/uint64_t{0u}
  , /*decltype(_impl_.mtu_)*/0u
  , /*decltype(_impl_.close_)*/false
  , /*decltype(_impl_.handshake_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PacketDefaultTypeInternal() {}
  union {
    Packet _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PacketDefaultTypeInternal _Packet_default_instance_;
}  // namespace pb
static ::_pb::Metadata file_level_metadata_ncp_2fpb_2fpacket_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_ncp_2fpb_2fpacket_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_ncp_2fpb_2fpacket_2eproto = nullptr;

const uint32_t TableStruct_ncp_2fpb_2fpacket_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::Packet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pb::Packet, _impl_.sequence_id_),
  PROTOBUF_FIELD_OFFSET(::pb::Packet, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::pb::Packet, _impl_.ack_start_seq_),
  PROTOBUF_FIELD_OFFSET(::pb::Packet, _impl_.ack_seq_count_),
  PROTOBUF_FIELD_OFFSET(::pb::Packet, _impl_.bytes_read_),
  PROTOBUF_FIELD_OFFSET(::pb::Packet, _impl_.client_ids_),
  PROTOBUF_FIELD_OFFSET(::pb::Packet, _impl_.window_size_),
  PROTOBUF_FIELD_OFFSET(::pb::Packet, _impl_.mtu_),
  PROTOBUF_FIELD_OFFSET(::pb::Packet, _impl_.close_),
  PROTOBUF_FIELD_OFFSET(::pb::Packet, _impl_.handshake_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::pb::Packet)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::pb::_Packet_default_instance_._instance,
};

const char descriptor_table_protodef_ncp_2fpb_2fpacket_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023ncp/pb/packet.proto\022\002pb\"\305\001\n\006Packet\022\023\n\013"
  "sequence_id\030\001 \001(\r\022\014\n\004data\030\002 \001(\014\022\025\n\rack_s"
  "tart_seq\030\003 \003(\r\022\025\n\rack_seq_count\030\004 \003(\r\022\022\n"
  "\nbytes_read\030\005 \001(\004\022\022\n\nclient_ids\030\006 \003(\t\022\023\n"
  "\013window_size\030\007 \001(\r\022\013\n\003mtu\030\010 \001(\r\022\r\n\005close"
  "\030\t \001(\010\022\021\n\thandshake\030\n \001(\010b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_ncp_2fpb_2fpacket_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_ncp_2fpb_2fpacket_2eproto = {
    false, false, 233, descriptor_table_protodef_ncp_2fpb_2fpacket_2eproto,
    "ncp/pb/packet.proto",
    &descriptor_table_ncp_2fpb_2fpacket_2eproto_once, nullptr, 0, 1,
    schemas, file_default_instances, TableStruct_ncp_2fpb_2fpacket_2eproto::offsets,
    file_level_metadata_ncp_2fpb_2fpacket_2eproto, file_level_enum_descriptors_ncp_2fpb_2fpacket_2eproto,
    file_level_service_descriptors_ncp_2fpb_2fpacket_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_ncp_2fpb_2fpacket_2eproto_getter() {
  return &descriptor_table_ncp_2fpb_2fpacket_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_ncp_2fpb_2fpacket_2eproto(&descriptor_table_ncp_2fpb_2fpacket_2eproto);
namespace pb {

// ===================================================================

class Packet::_Internal {
 public:
};

Packet::Packet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pb.Packet)
}
Packet::Packet(const Packet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Packet* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ack_start_seq_){from._impl_.ack_start_seq_}
    , /*decltype(_impl_._ack_start_seq_cached_byte_size_)*/{0}
    , decltype(_impl_.ack_seq_count_){from._impl_.ack_seq_count_}
    , /*decltype(_impl_._ack_seq_count_cached_byte_size_)*/{0}
    , decltype(_impl_.client_ids_){from._impl_.client_ids_}
    , decltype(_impl_.data_){}
    , decltype(_impl_.sequence_id_){}
    , decltype(_impl_.window_size_){}
    , decltype(_impl_.bytes_read_){}
    , decltype(_impl_.mtu_){}
    , decltype(_impl_.close_){}
    , decltype(_impl_.handshake_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.sequence_id_, &from._impl_.sequence_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.handshake_) -
    reinterpret_cast<char*>(&_impl_.sequence_id_)) + sizeof(_impl_.handshake_));
  // @@protoc_insertion_point(copy_constructor:pb.Packet)
}

inline void Packet::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ack_start_seq_){arena}
    , /*decltype(_impl_._ack_start_seq_cached_byte_size_)*/{0}
    , decltype(_impl_.ack_seq_count_){arena}
    , /*decltype(_impl_._ack_seq_count_cached_byte_size_)*/{0}
    , decltype(_impl_.client_ids_){arena}
    , decltype(_impl_.data_){}
    , decltype(_impl_.sequence_id_){0u}
    , decltype(_impl_.window_size_){0u}
    , decltype(_impl_.bytes_read_){uint64_t{0u}}
    , decltype(_impl_.mtu_){0u}
    , decltype(_impl_.close_){false}
    , decltype(_impl_.handshake_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Packet::~Packet() {
  // @@protoc_insertion_point(destructor:pb.Packet)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Packet::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ack_start_seq_.~RepeatedField();
  _impl_.ack_seq_count_.~RepeatedField();
  _impl_.client_ids_.~RepeatedPtrField();
  _impl_.data_.Destroy();
}

void Packet::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Packet::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.Packet)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ack_start_seq_.Clear();
  _impl_.ack_seq_count_.Clear();
  _impl_.client_ids_.Clear();
  _impl_.data_.ClearToEmpty();
  ::memset(&_impl_.sequence_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.handshake_) -
      reinterpret_cast<char*>(&_impl_.sequence_id_)) + sizeof(_impl_.handshake_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Packet::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 sequence_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.sequence_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 ack_start_seq = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_ack_start_seq(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_ack_start_seq(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 ack_seq_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_ack_seq_count(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 32) {
          _internal_add_ack_seq_count(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 bytes_read = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.bytes_read_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string client_ids = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_client_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "pb.Packet.client_ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint32 window_size = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.window_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 mtu = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.mtu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool close = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.close_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool handshake = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.handshake_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Packet::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.Packet)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 sequence_id = 1;
  if (this->_internal_sequence_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_sequence_id(), target);
  }

  // bytes data = 2;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_data(), target);
  }

  // repeated uint32 ack_start_seq = 3;
  {
    int byte_size = _impl_._ack_start_seq_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          3, _internal_ack_start_seq(), byte_size, target);
    }
  }

  // repeated uint32 ack_seq_count = 4;
  {
    int byte_size = _impl_._ack_seq_count_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          4, _internal_ack_seq_count(), byte_size, target);
    }
  }

  // uint64 bytes_read = 5;
  if (this->_internal_bytes_read() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_bytes_read(), target);
  }

  // repeated string client_ids = 6;
  for (int i = 0, n = this->_internal_client_ids_size(); i < n; i++) {
    const auto& s = this->_internal_client_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.Packet.client_ids");
    target = stream->WriteString(6, s, target);
  }

  // uint32 window_size = 7;
  if (this->_internal_window_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_window_size(), target);
  }

  // uint32 mtu = 8;
  if (this->_internal_mtu() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_mtu(), target);
  }

  // bool close = 9;
  if (this->_internal_close() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_close(), target);
  }

  // bool handshake = 10;
  if (this->_internal_handshake() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_handshake(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.Packet)
  return target;
}

size_t Packet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.Packet)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 ack_start_seq = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.ack_start_seq_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._ack_start_seq_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 ack_seq_count = 4;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.ack_seq_count_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._ack_seq_count_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated string client_ids = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.client_ids_.size());
  for (int i = 0, n = _impl_.client_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.client_ids_.Get(i));
  }

  // bytes data = 2;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // uint32 sequence_id = 1;
  if (this->_internal_sequence_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_sequence_id());
  }

  // uint32 window_size = 7;
  if (this->_internal_window_size() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_window_size());
  }

  // uint64 bytes_read = 5;
  if (this->_internal_bytes_read() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_bytes_read());
  }

  // uint32 mtu = 8;
  if (this->_internal_mtu() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_mtu());
  }

  // bool close = 9;
  if (this->_internal_close() != 0) {
    total_size += 1 + 1;
  }

  // bool handshake = 10;
  if (this->_internal_handshake() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Packet::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Packet::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Packet::GetClassData() const { return &_class_data_; }


void Packet::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Packet*>(&to_msg);
  auto& from = static_cast<const Packet&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pb.Packet)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.ack_start_seq_.MergeFrom(from._impl_.ack_start_seq_);
  _this->_impl_.ack_seq_count_.MergeFrom(from._impl_.ack_seq_count_);
  _this->_impl_.client_ids_.MergeFrom(from._impl_.client_ids_);
  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (from._internal_sequence_id() != 0) {
    _this->_internal_set_sequence_id(from._internal_sequence_id());
  }
  if (from._internal_window_size() != 0) {
    _this->_internal_set_window_size(from._internal_window_size());
  }
  if (from._internal_bytes_read() != 0) {
    _this->_internal_set_bytes_read(from._internal_bytes_read());
  }
  if (from._internal_mtu() != 0) {
    _this->_internal_set_mtu(from._internal_mtu());
  }
  if (from._internal_close() != 0) {
    _this->_internal_set_close(from._internal_close());
  }
  if (from._internal_handshake() != 0) {
    _this->_internal_set_handshake(from._internal_handshake());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Packet::CopyFrom(const Packet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.Packet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet::IsInitialized() const {
  return true;
}

void Packet::InternalSwap(Packet* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.ack_start_seq_.InternalSwap(&other->_impl_.ack_start_seq_);
  _impl_.ack_seq_count_.InternalSwap(&other->_impl_.ack_seq_count_);
  _impl_.client_ids_.InternalSwap(&other->_impl_.client_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Packet, _impl_.handshake_)
      + sizeof(Packet::_impl_.handshake_)
      - PROTOBUF_FIELD_OFFSET(Packet, _impl_.sequence_id_)>(
          reinterpret_cast<char*>(&_impl_.sequence_id_),
          reinterpret_cast<char*>(&other->_impl_.sequence_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Packet::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ncp_2fpb_2fpacket_2eproto_getter, &descriptor_table_ncp_2fpb_2fpacket_2eproto_once,
      file_level_metadata_ncp_2fpb_2fpacket_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::Packet*
Arena::CreateMaybeMessage< ::pb::Packet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::Packet >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
