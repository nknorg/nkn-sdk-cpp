// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ncp/pb/packet.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ncp_2fpb_2fpacket_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ncp_2fpb_2fpacket_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021009 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ncp_2fpb_2fpacket_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ncp_2fpb_2fpacket_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ncp_2fpb_2fpacket_2eproto;
namespace pb {
class Packet;
struct PacketDefaultTypeInternal;
extern PacketDefaultTypeInternal _Packet_default_instance_;
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::Packet* Arena::CreateMaybeMessage<::pb::Packet>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {

// ===================================================================

class Packet final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.Packet) */ {
 public:
  inline Packet() : Packet(nullptr) {}
  ~Packet() override;
  explicit PROTOBUF_CONSTEXPR Packet(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Packet(const Packet& from);
  Packet(Packet&& from) noexcept
    : Packet() {
    *this = ::std::move(from);
  }

  inline Packet& operator=(const Packet& from) {
    CopyFrom(from);
    return *this;
  }
  inline Packet& operator=(Packet&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Packet& default_instance() {
    return *internal_default_instance();
  }
  static inline const Packet* internal_default_instance() {
    return reinterpret_cast<const Packet*>(
               &_Packet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Packet& a, Packet& b) {
    a.Swap(&b);
  }
  inline void Swap(Packet* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Packet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Packet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Packet>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Packet& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Packet& from) {
    Packet::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Packet* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.Packet";
  }
  protected:
  explicit Packet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAckStartSeqFieldNumber = 3,
    kAckSeqCountFieldNumber = 4,
    kClientIdsFieldNumber = 6,
    kDataFieldNumber = 2,
    kSequenceIdFieldNumber = 1,
    kWindowSizeFieldNumber = 7,
    kBytesReadFieldNumber = 5,
    kMtuFieldNumber = 8,
    kCloseFieldNumber = 9,
    kHandshakeFieldNumber = 10,
  };
  // repeated uint32 ack_start_seq = 3;
  int ack_start_seq_size() const;
  private:
  int _internal_ack_start_seq_size() const;
  public:
  void clear_ack_start_seq();
  private:
  uint32_t _internal_ack_start_seq(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_ack_start_seq() const;
  void _internal_add_ack_start_seq(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_ack_start_seq();
  public:
  uint32_t ack_start_seq(int index) const;
  void set_ack_start_seq(int index, uint32_t value);
  void add_ack_start_seq(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      ack_start_seq() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_ack_start_seq();

  // repeated uint32 ack_seq_count = 4;
  int ack_seq_count_size() const;
  private:
  int _internal_ack_seq_count_size() const;
  public:
  void clear_ack_seq_count();
  private:
  uint32_t _internal_ack_seq_count(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_ack_seq_count() const;
  void _internal_add_ack_seq_count(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_ack_seq_count();
  public:
  uint32_t ack_seq_count(int index) const;
  void set_ack_seq_count(int index, uint32_t value);
  void add_ack_seq_count(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      ack_seq_count() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_ack_seq_count();

  // repeated string client_ids = 6;
  int client_ids_size() const;
  private:
  int _internal_client_ids_size() const;
  public:
  void clear_client_ids();
  const std::string& client_ids(int index) const;
  std::string* mutable_client_ids(int index);
  void set_client_ids(int index, const std::string& value);
  void set_client_ids(int index, std::string&& value);
  void set_client_ids(int index, const char* value);
  void set_client_ids(int index, const char* value, size_t size);
  std::string* add_client_ids();
  void add_client_ids(const std::string& value);
  void add_client_ids(std::string&& value);
  void add_client_ids(const char* value);
  void add_client_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& client_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_client_ids();
  private:
  const std::string& _internal_client_ids(int index) const;
  std::string* _internal_add_client_ids();
  public:

  // bytes data = 2;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // uint32 sequence_id = 1;
  void clear_sequence_id();
  uint32_t sequence_id() const;
  void set_sequence_id(uint32_t value);
  private:
  uint32_t _internal_sequence_id() const;
  void _internal_set_sequence_id(uint32_t value);
  public:

  // uint32 window_size = 7;
  void clear_window_size();
  uint32_t window_size() const;
  void set_window_size(uint32_t value);
  private:
  uint32_t _internal_window_size() const;
  void _internal_set_window_size(uint32_t value);
  public:

  // uint64 bytes_read = 5;
  void clear_bytes_read();
  uint64_t bytes_read() const;
  void set_bytes_read(uint64_t value);
  private:
  uint64_t _internal_bytes_read() const;
  void _internal_set_bytes_read(uint64_t value);
  public:

  // uint32 mtu = 8;
  void clear_mtu();
  uint32_t mtu() const;
  void set_mtu(uint32_t value);
  private:
  uint32_t _internal_mtu() const;
  void _internal_set_mtu(uint32_t value);
  public:

  // bool close = 9;
  void clear_close();
  bool close() const;
  void set_close(bool value);
  private:
  bool _internal_close() const;
  void _internal_set_close(bool value);
  public:

  // bool handshake = 10;
  void clear_handshake();
  bool handshake() const;
  void set_handshake(bool value);
  private:
  bool _internal_handshake() const;
  void _internal_set_handshake(bool value);
  public:

  // @@protoc_insertion_point(class_scope:pb.Packet)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > ack_start_seq_;
    mutable std::atomic<int> _ack_start_seq_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > ack_seq_count_;
    mutable std::atomic<int> _ack_seq_count_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> client_ids_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    uint32_t sequence_id_;
    uint32_t window_size_;
    uint64_t bytes_read_;
    uint32_t mtu_;
    bool close_;
    bool handshake_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ncp_2fpb_2fpacket_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Packet

// uint32 sequence_id = 1;
inline void Packet::clear_sequence_id() {
  _impl_.sequence_id_ = 0u;
}
inline uint32_t Packet::_internal_sequence_id() const {
  return _impl_.sequence_id_;
}
inline uint32_t Packet::sequence_id() const {
  // @@protoc_insertion_point(field_get:pb.Packet.sequence_id)
  return _internal_sequence_id();
}
inline void Packet::_internal_set_sequence_id(uint32_t value) {
  
  _impl_.sequence_id_ = value;
}
inline void Packet::set_sequence_id(uint32_t value) {
  _internal_set_sequence_id(value);
  // @@protoc_insertion_point(field_set:pb.Packet.sequence_id)
}

// bytes data = 2;
inline void Packet::clear_data() {
  _impl_.data_.ClearToEmpty();
}
inline const std::string& Packet::data() const {
  // @@protoc_insertion_point(field_get:pb.Packet.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Packet::set_data(ArgT0&& arg0, ArgT... args) {
 
 _impl_.data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.Packet.data)
}
inline std::string* Packet::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:pb.Packet.data)
  return _s;
}
inline const std::string& Packet::_internal_data() const {
  return _impl_.data_.Get();
}
inline void Packet::_internal_set_data(const std::string& value) {
  
  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* Packet::_internal_mutable_data() {
  
  return _impl_.data_.Mutable(GetArenaForAllocation());
}
inline std::string* Packet::release_data() {
  // @@protoc_insertion_point(field_release:pb.Packet.data)
  return _impl_.data_.Release();
}
inline void Packet::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  _impl_.data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pb.Packet.data)
}

// repeated uint32 ack_start_seq = 3;
inline int Packet::_internal_ack_start_seq_size() const {
  return _impl_.ack_start_seq_.size();
}
inline int Packet::ack_start_seq_size() const {
  return _internal_ack_start_seq_size();
}
inline void Packet::clear_ack_start_seq() {
  _impl_.ack_start_seq_.Clear();
}
inline uint32_t Packet::_internal_ack_start_seq(int index) const {
  return _impl_.ack_start_seq_.Get(index);
}
inline uint32_t Packet::ack_start_seq(int index) const {
  // @@protoc_insertion_point(field_get:pb.Packet.ack_start_seq)
  return _internal_ack_start_seq(index);
}
inline void Packet::set_ack_start_seq(int index, uint32_t value) {
  _impl_.ack_start_seq_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.Packet.ack_start_seq)
}
inline void Packet::_internal_add_ack_start_seq(uint32_t value) {
  _impl_.ack_start_seq_.Add(value);
}
inline void Packet::add_ack_start_seq(uint32_t value) {
  _internal_add_ack_start_seq(value);
  // @@protoc_insertion_point(field_add:pb.Packet.ack_start_seq)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Packet::_internal_ack_start_seq() const {
  return _impl_.ack_start_seq_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Packet::ack_start_seq() const {
  // @@protoc_insertion_point(field_list:pb.Packet.ack_start_seq)
  return _internal_ack_start_seq();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Packet::_internal_mutable_ack_start_seq() {
  return &_impl_.ack_start_seq_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Packet::mutable_ack_start_seq() {
  // @@protoc_insertion_point(field_mutable_list:pb.Packet.ack_start_seq)
  return _internal_mutable_ack_start_seq();
}

// repeated uint32 ack_seq_count = 4;
inline int Packet::_internal_ack_seq_count_size() const {
  return _impl_.ack_seq_count_.size();
}
inline int Packet::ack_seq_count_size() const {
  return _internal_ack_seq_count_size();
}
inline void Packet::clear_ack_seq_count() {
  _impl_.ack_seq_count_.Clear();
}
inline uint32_t Packet::_internal_ack_seq_count(int index) const {
  return _impl_.ack_seq_count_.Get(index);
}
inline uint32_t Packet::ack_seq_count(int index) const {
  // @@protoc_insertion_point(field_get:pb.Packet.ack_seq_count)
  return _internal_ack_seq_count(index);
}
inline void Packet::set_ack_seq_count(int index, uint32_t value) {
  _impl_.ack_seq_count_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.Packet.ack_seq_count)
}
inline void Packet::_internal_add_ack_seq_count(uint32_t value) {
  _impl_.ack_seq_count_.Add(value);
}
inline void Packet::add_ack_seq_count(uint32_t value) {
  _internal_add_ack_seq_count(value);
  // @@protoc_insertion_point(field_add:pb.Packet.ack_seq_count)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Packet::_internal_ack_seq_count() const {
  return _impl_.ack_seq_count_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Packet::ack_seq_count() const {
  // @@protoc_insertion_point(field_list:pb.Packet.ack_seq_count)
  return _internal_ack_seq_count();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Packet::_internal_mutable_ack_seq_count() {
  return &_impl_.ack_seq_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Packet::mutable_ack_seq_count() {
  // @@protoc_insertion_point(field_mutable_list:pb.Packet.ack_seq_count)
  return _internal_mutable_ack_seq_count();
}

// uint64 bytes_read = 5;
inline void Packet::clear_bytes_read() {
  _impl_.bytes_read_ = uint64_t{0u};
}
inline uint64_t Packet::_internal_bytes_read() const {
  return _impl_.bytes_read_;
}
inline uint64_t Packet::bytes_read() const {
  // @@protoc_insertion_point(field_get:pb.Packet.bytes_read)
  return _internal_bytes_read();
}
inline void Packet::_internal_set_bytes_read(uint64_t value) {
  
  _impl_.bytes_read_ = value;
}
inline void Packet::set_bytes_read(uint64_t value) {
  _internal_set_bytes_read(value);
  // @@protoc_insertion_point(field_set:pb.Packet.bytes_read)
}

// repeated string client_ids = 6;
inline int Packet::_internal_client_ids_size() const {
  return _impl_.client_ids_.size();
}
inline int Packet::client_ids_size() const {
  return _internal_client_ids_size();
}
inline void Packet::clear_client_ids() {
  _impl_.client_ids_.Clear();
}
inline std::string* Packet::add_client_ids() {
  std::string* _s = _internal_add_client_ids();
  // @@protoc_insertion_point(field_add_mutable:pb.Packet.client_ids)
  return _s;
}
inline const std::string& Packet::_internal_client_ids(int index) const {
  return _impl_.client_ids_.Get(index);
}
inline const std::string& Packet::client_ids(int index) const {
  // @@protoc_insertion_point(field_get:pb.Packet.client_ids)
  return _internal_client_ids(index);
}
inline std::string* Packet::mutable_client_ids(int index) {
  // @@protoc_insertion_point(field_mutable:pb.Packet.client_ids)
  return _impl_.client_ids_.Mutable(index);
}
inline void Packet::set_client_ids(int index, const std::string& value) {
  _impl_.client_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:pb.Packet.client_ids)
}
inline void Packet::set_client_ids(int index, std::string&& value) {
  _impl_.client_ids_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:pb.Packet.client_ids)
}
inline void Packet::set_client_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.client_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.Packet.client_ids)
}
inline void Packet::set_client_ids(int index, const char* value, size_t size) {
  _impl_.client_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.Packet.client_ids)
}
inline std::string* Packet::_internal_add_client_ids() {
  return _impl_.client_ids_.Add();
}
inline void Packet::add_client_ids(const std::string& value) {
  _impl_.client_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pb.Packet.client_ids)
}
inline void Packet::add_client_ids(std::string&& value) {
  _impl_.client_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:pb.Packet.client_ids)
}
inline void Packet::add_client_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.client_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pb.Packet.client_ids)
}
inline void Packet::add_client_ids(const char* value, size_t size) {
  _impl_.client_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pb.Packet.client_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Packet::client_ids() const {
  // @@protoc_insertion_point(field_list:pb.Packet.client_ids)
  return _impl_.client_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Packet::mutable_client_ids() {
  // @@protoc_insertion_point(field_mutable_list:pb.Packet.client_ids)
  return &_impl_.client_ids_;
}

// uint32 window_size = 7;
inline void Packet::clear_window_size() {
  _impl_.window_size_ = 0u;
}
inline uint32_t Packet::_internal_window_size() const {
  return _impl_.window_size_;
}
inline uint32_t Packet::window_size() const {
  // @@protoc_insertion_point(field_get:pb.Packet.window_size)
  return _internal_window_size();
}
inline void Packet::_internal_set_window_size(uint32_t value) {
  
  _impl_.window_size_ = value;
}
inline void Packet::set_window_size(uint32_t value) {
  _internal_set_window_size(value);
  // @@protoc_insertion_point(field_set:pb.Packet.window_size)
}

// uint32 mtu = 8;
inline void Packet::clear_mtu() {
  _impl_.mtu_ = 0u;
}
inline uint32_t Packet::_internal_mtu() const {
  return _impl_.mtu_;
}
inline uint32_t Packet::mtu() const {
  // @@protoc_insertion_point(field_get:pb.Packet.mtu)
  return _internal_mtu();
}
inline void Packet::_internal_set_mtu(uint32_t value) {
  
  _impl_.mtu_ = value;
}
inline void Packet::set_mtu(uint32_t value) {
  _internal_set_mtu(value);
  // @@protoc_insertion_point(field_set:pb.Packet.mtu)
}

// bool close = 9;
inline void Packet::clear_close() {
  _impl_.close_ = false;
}
inline bool Packet::_internal_close() const {
  return _impl_.close_;
}
inline bool Packet::close() const {
  // @@protoc_insertion_point(field_get:pb.Packet.close)
  return _internal_close();
}
inline void Packet::_internal_set_close(bool value) {
  
  _impl_.close_ = value;
}
inline void Packet::set_close(bool value) {
  _internal_set_close(value);
  // @@protoc_insertion_point(field_set:pb.Packet.close)
}

// bool handshake = 10;
inline void Packet::clear_handshake() {
  _impl_.handshake_ = false;
}
inline bool Packet::_internal_handshake() const {
  return _impl_.handshake_;
}
inline bool Packet::handshake() const {
  // @@protoc_insertion_point(field_get:pb.Packet.handshake)
  return _internal_handshake();
}
inline void Packet::_internal_set_handshake(bool value) {
  
  _impl_.handshake_ = value;
}
inline void Packet::set_handshake(bool value) {
  _internal_set_handshake(value);
  // @@protoc_insertion_point(field_set:pb.Packet.handshake)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ncp_2fpb_2fpacket_2eproto
