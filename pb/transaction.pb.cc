// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pb/transaction.proto

#include "pb/transaction.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace pb {
PROTOBUF_CONSTEXPR UnsignedTx::UnsignedTx(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.attributes_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.payload_)*/nullptr
  , /*decltype(_impl_.nonce_)*/uint64_t{0u}
  , /*decltype(_impl_.fee_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UnsignedTxDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UnsignedTxDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UnsignedTxDefaultTypeInternal() {}
  union {
    UnsignedTx _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UnsignedTxDefaultTypeInternal _UnsignedTx_default_instance_;
PROTOBUF_CONSTEXPR Transaction::Transaction(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.programs_)*/{}
  , /*decltype(_impl_.unsigned_tx_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TransactionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TransactionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TransactionDefaultTypeInternal() {}
  union {
    Transaction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TransactionDefaultTypeInternal _Transaction_default_instance_;
PROTOBUF_CONSTEXPR Program::Program(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.parameter_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ProgramDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProgramDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProgramDefaultTypeInternal() {}
  union {
    Program _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProgramDefaultTypeInternal _Program_default_instance_;
PROTOBUF_CONSTEXPR Payload::Payload(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PayloadDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PayloadDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PayloadDefaultTypeInternal() {}
  union {
    Payload _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PayloadDefaultTypeInternal _Payload_default_instance_;
PROTOBUF_CONSTEXPR Coinbase::Coinbase(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sender_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.recipient_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.amount_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CoinbaseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CoinbaseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CoinbaseDefaultTypeInternal() {}
  union {
    Coinbase _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CoinbaseDefaultTypeInternal _Coinbase_default_instance_;
PROTOBUF_CONSTEXPR SigChainTxn::SigChainTxn(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sig_chain_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.submitter_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SigChainTxnDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SigChainTxnDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SigChainTxnDefaultTypeInternal() {}
  union {
    SigChainTxn _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SigChainTxnDefaultTypeInternal _SigChainTxn_default_instance_;
PROTOBUF_CONSTEXPR RegisterName::RegisterName(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.registrant_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.registration_fee_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RegisterNameDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegisterNameDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegisterNameDefaultTypeInternal() {}
  union {
    RegisterName _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegisterNameDefaultTypeInternal _RegisterName_default_instance_;
PROTOBUF_CONSTEXPR TransferName::TransferName(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.registrant_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.recipient_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TransferNameDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TransferNameDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TransferNameDefaultTypeInternal() {}
  union {
    TransferName _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TransferNameDefaultTypeInternal _TransferName_default_instance_;
PROTOBUF_CONSTEXPR DeleteName::DeleteName(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.registrant_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeleteNameDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeleteNameDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeleteNameDefaultTypeInternal() {}
  union {
    DeleteName _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeleteNameDefaultTypeInternal _DeleteName_default_instance_;
PROTOBUF_CONSTEXPR Subscribe::Subscribe(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.subscriber_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.identifier_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.topic_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.meta_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.bucket_)*/0u
  , /*decltype(_impl_.duration_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SubscribeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscribeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscribeDefaultTypeInternal() {}
  union {
    Subscribe _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscribeDefaultTypeInternal _Subscribe_default_instance_;
PROTOBUF_CONSTEXPR Unsubscribe::Unsubscribe(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.subscriber_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.identifier_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.topic_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UnsubscribeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UnsubscribeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UnsubscribeDefaultTypeInternal() {}
  union {
    Unsubscribe _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UnsubscribeDefaultTypeInternal _Unsubscribe_default_instance_;
PROTOBUF_CONSTEXPR TransferAsset::TransferAsset(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sender_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.recipient_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.amount_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TransferAssetDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TransferAssetDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TransferAssetDefaultTypeInternal() {}
  union {
    TransferAsset _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TransferAssetDefaultTypeInternal _TransferAsset_default_instance_;
PROTOBUF_CONSTEXPR GenerateID::GenerateID(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.public_key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sender_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.registration_fee_)*/int64_t{0}
  , /*decltype(_impl_.version_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GenerateIDDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GenerateIDDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GenerateIDDefaultTypeInternal() {}
  union {
    GenerateID _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GenerateIDDefaultTypeInternal _GenerateID_default_instance_;
PROTOBUF_CONSTEXPR NanoPay::NanoPay(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sender_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.recipient_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/uint64_t{0u}
  , /*decltype(_impl_.amount_)*/int64_t{0}
  , /*decltype(_impl_.txn_expiration_)*/0u
  , /*decltype(_impl_.nano_pay_expiration_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NanoPayDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NanoPayDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NanoPayDefaultTypeInternal() {}
  union {
    NanoPay _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NanoPayDefaultTypeInternal _NanoPay_default_instance_;
PROTOBUF_CONSTEXPR IssueAsset::IssueAsset(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sender_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.symbol_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.total_supply_)*/int64_t{0}
  , /*decltype(_impl_.precision_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IssueAssetDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IssueAssetDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IssueAssetDefaultTypeInternal() {}
  union {
    IssueAsset _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IssueAssetDefaultTypeInternal _IssueAsset_default_instance_;
}  // namespace pb
static ::_pb::Metadata file_level_metadata_pb_2ftransaction_2eproto[15];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_pb_2ftransaction_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_pb_2ftransaction_2eproto = nullptr;

const uint32_t TableStruct_pb_2ftransaction_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::UnsignedTx, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pb::UnsignedTx, _impl_.payload_),
  PROTOBUF_FIELD_OFFSET(::pb::UnsignedTx, _impl_.nonce_),
  PROTOBUF_FIELD_OFFSET(::pb::UnsignedTx, _impl_.fee_),
  PROTOBUF_FIELD_OFFSET(::pb::UnsignedTx, _impl_.attributes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::Transaction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pb::Transaction, _impl_.unsigned_tx_),
  PROTOBUF_FIELD_OFFSET(::pb::Transaction, _impl_.programs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::Program, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pb::Program, _impl_.code_),
  PROTOBUF_FIELD_OFFSET(::pb::Program, _impl_.parameter_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::Payload, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pb::Payload, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::pb::Payload, _impl_.data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::Coinbase, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pb::Coinbase, _impl_.sender_),
  PROTOBUF_FIELD_OFFSET(::pb::Coinbase, _impl_.recipient_),
  PROTOBUF_FIELD_OFFSET(::pb::Coinbase, _impl_.amount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::SigChainTxn, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pb::SigChainTxn, _impl_.sig_chain_),
  PROTOBUF_FIELD_OFFSET(::pb::SigChainTxn, _impl_.submitter_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::RegisterName, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pb::RegisterName, _impl_.registrant_),
  PROTOBUF_FIELD_OFFSET(::pb::RegisterName, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::pb::RegisterName, _impl_.registration_fee_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::TransferName, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pb::TransferName, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::pb::TransferName, _impl_.registrant_),
  PROTOBUF_FIELD_OFFSET(::pb::TransferName, _impl_.recipient_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::DeleteName, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pb::DeleteName, _impl_.registrant_),
  PROTOBUF_FIELD_OFFSET(::pb::DeleteName, _impl_.name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::Subscribe, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pb::Subscribe, _impl_.subscriber_),
  PROTOBUF_FIELD_OFFSET(::pb::Subscribe, _impl_.identifier_),
  PROTOBUF_FIELD_OFFSET(::pb::Subscribe, _impl_.topic_),
  PROTOBUF_FIELD_OFFSET(::pb::Subscribe, _impl_.bucket_),
  PROTOBUF_FIELD_OFFSET(::pb::Subscribe, _impl_.duration_),
  PROTOBUF_FIELD_OFFSET(::pb::Subscribe, _impl_.meta_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::Unsubscribe, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pb::Unsubscribe, _impl_.subscriber_),
  PROTOBUF_FIELD_OFFSET(::pb::Unsubscribe, _impl_.identifier_),
  PROTOBUF_FIELD_OFFSET(::pb::Unsubscribe, _impl_.topic_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::TransferAsset, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pb::TransferAsset, _impl_.sender_),
  PROTOBUF_FIELD_OFFSET(::pb::TransferAsset, _impl_.recipient_),
  PROTOBUF_FIELD_OFFSET(::pb::TransferAsset, _impl_.amount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::GenerateID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pb::GenerateID, _impl_.public_key_),
  PROTOBUF_FIELD_OFFSET(::pb::GenerateID, _impl_.registration_fee_),
  PROTOBUF_FIELD_OFFSET(::pb::GenerateID, _impl_.sender_),
  PROTOBUF_FIELD_OFFSET(::pb::GenerateID, _impl_.version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::NanoPay, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pb::NanoPay, _impl_.sender_),
  PROTOBUF_FIELD_OFFSET(::pb::NanoPay, _impl_.recipient_),
  PROTOBUF_FIELD_OFFSET(::pb::NanoPay, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::pb::NanoPay, _impl_.amount_),
  PROTOBUF_FIELD_OFFSET(::pb::NanoPay, _impl_.txn_expiration_),
  PROTOBUF_FIELD_OFFSET(::pb::NanoPay, _impl_.nano_pay_expiration_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::IssueAsset, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pb::IssueAsset, _impl_.sender_),
  PROTOBUF_FIELD_OFFSET(::pb::IssueAsset, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::pb::IssueAsset, _impl_.symbol_),
  PROTOBUF_FIELD_OFFSET(::pb::IssueAsset, _impl_.total_supply_),
  PROTOBUF_FIELD_OFFSET(::pb::IssueAsset, _impl_.precision_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::pb::UnsignedTx)},
  { 10, -1, -1, sizeof(::pb::Transaction)},
  { 18, -1, -1, sizeof(::pb::Program)},
  { 26, -1, -1, sizeof(::pb::Payload)},
  { 34, -1, -1, sizeof(::pb::Coinbase)},
  { 43, -1, -1, sizeof(::pb::SigChainTxn)},
  { 51, -1, -1, sizeof(::pb::RegisterName)},
  { 60, -1, -1, sizeof(::pb::TransferName)},
  { 69, -1, -1, sizeof(::pb::DeleteName)},
  { 77, -1, -1, sizeof(::pb::Subscribe)},
  { 89, -1, -1, sizeof(::pb::Unsubscribe)},
  { 98, -1, -1, sizeof(::pb::TransferAsset)},
  { 107, -1, -1, sizeof(::pb::GenerateID)},
  { 117, -1, -1, sizeof(::pb::NanoPay)},
  { 129, -1, -1, sizeof(::pb::IssueAsset)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::pb::_UnsignedTx_default_instance_._instance,
  &::pb::_Transaction_default_instance_._instance,
  &::pb::_Program_default_instance_._instance,
  &::pb::_Payload_default_instance_._instance,
  &::pb::_Coinbase_default_instance_._instance,
  &::pb::_SigChainTxn_default_instance_._instance,
  &::pb::_RegisterName_default_instance_._instance,
  &::pb::_TransferName_default_instance_._instance,
  &::pb::_DeleteName_default_instance_._instance,
  &::pb::_Subscribe_default_instance_._instance,
  &::pb::_Unsubscribe_default_instance_._instance,
  &::pb::_TransferAsset_default_instance_._instance,
  &::pb::_GenerateID_default_instance_._instance,
  &::pb::_NanoPay_default_instance_._instance,
  &::pb::_IssueAsset_default_instance_._instance,
};

const char descriptor_table_protodef_pb_2ftransaction_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024pb/transaction.proto\022\002pb\"Z\n\nUnsignedTx"
  "\022\034\n\007payload\030\001 \001(\0132\013.pb.Payload\022\r\n\005nonce\030"
  "\002 \001(\004\022\013\n\003fee\030\003 \001(\003\022\022\n\nattributes\030\004 \001(\014\"Q"
  "\n\013Transaction\022#\n\013unsigned_tx\030\001 \001(\0132\016.pb."
  "UnsignedTx\022\035\n\010programs\030\002 \003(\0132\013.pb.Progra"
  "m\"*\n\007Program\022\014\n\004code\030\001 \001(\014\022\021\n\tparameter\030"
  "\002 \001(\014\"6\n\007Payload\022\035\n\004type\030\001 \001(\0162\017.pb.Payl"
  "oadType\022\014\n\004data\030\002 \001(\014\"=\n\010Coinbase\022\016\n\006sen"
  "der\030\001 \001(\014\022\021\n\trecipient\030\002 \001(\014\022\016\n\006amount\030\003"
  " \001(\003\"3\n\013SigChainTxn\022\021\n\tsig_chain\030\001 \001(\014\022\021"
  "\n\tsubmitter\030\002 \001(\014\"J\n\014RegisterName\022\022\n\nreg"
  "istrant\030\001 \001(\014\022\014\n\004name\030\002 \001(\t\022\030\n\020registrat"
  "ion_fee\030\003 \001(\003\"C\n\014TransferName\022\014\n\004name\030\001 "
  "\001(\t\022\022\n\nregistrant\030\002 \001(\014\022\021\n\trecipient\030\003 \001"
  "(\014\".\n\nDeleteName\022\022\n\nregistrant\030\001 \001(\014\022\014\n\004"
  "name\030\002 \001(\t\"v\n\tSubscribe\022\022\n\nsubscriber\030\001 "
  "\001(\014\022\022\n\nidentifier\030\002 \001(\t\022\r\n\005topic\030\003 \001(\t\022\022"
  "\n\006bucket\030\004 \001(\rB\002\030\001\022\020\n\010duration\030\005 \001(\r\022\014\n\004"
  "meta\030\006 \001(\014\"D\n\013Unsubscribe\022\022\n\nsubscriber\030"
  "\001 \001(\014\022\022\n\nidentifier\030\002 \001(\t\022\r\n\005topic\030\003 \001(\t"
  "\"B\n\rTransferAsset\022\016\n\006sender\030\001 \001(\014\022\021\n\trec"
  "ipient\030\002 \001(\014\022\016\n\006amount\030\003 \001(\003\"[\n\nGenerate"
  "ID\022\022\n\npublic_key\030\001 \001(\014\022\030\n\020registration_f"
  "ee\030\002 \001(\003\022\016\n\006sender\030\003 \001(\014\022\017\n\007version\030\004 \001("
  "\005\"}\n\007NanoPay\022\016\n\006sender\030\001 \001(\014\022\021\n\trecipien"
  "t\030\002 \001(\014\022\n\n\002id\030\003 \001(\004\022\016\n\006amount\030\004 \001(\003\022\026\n\016t"
  "xn_expiration\030\005 \001(\r\022\033\n\023nano_pay_expirati"
  "on\030\006 \001(\r\"c\n\nIssueAsset\022\016\n\006sender\030\001 \001(\014\022\014"
  "\n\004name\030\002 \001(\t\022\016\n\006symbol\030\003 \001(\t\022\024\n\014total_su"
  "pply\030\004 \001(\003\022\021\n\tprecision\030\005 \001(\r*\230\002\n\013Payloa"
  "dType\022\021\n\rCOINBASE_TYPE\020\000\022\027\n\023TRANSFER_ASS"
  "ET_TYPE\020\001\022\026\n\022SIG_CHAIN_TXN_TYPE\020\002\022\026\n\022REG"
  "ISTER_NAME_TYPE\020\003\022\026\n\022TRANSFER_NAME_TYPE\020"
  "\004\022\024\n\020DELETE_NAME_TYPE\020\005\022\022\n\016SUBSCRIBE_TYP"
  "E\020\006\022\024\n\020UNSUBSCRIBE_TYPE\020\007\022\024\n\020GENERATE_ID"
  "_TYPE\020\010\022\021\n\rNANO_PAY_TYPE\020\t\022\024\n\020ISSUE_ASSE"
  "T_TYPE\020\n\022\026\n\022GENERATE_ID_2_TYPE\020\013B\006Z\004./pb"
  "b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_pb_2ftransaction_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_pb_2ftransaction_2eproto = {
    false, false, 1488, descriptor_table_protodef_pb_2ftransaction_2eproto,
    "pb/transaction.proto",
    &descriptor_table_pb_2ftransaction_2eproto_once, nullptr, 0, 15,
    schemas, file_default_instances, TableStruct_pb_2ftransaction_2eproto::offsets,
    file_level_metadata_pb_2ftransaction_2eproto, file_level_enum_descriptors_pb_2ftransaction_2eproto,
    file_level_service_descriptors_pb_2ftransaction_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_pb_2ftransaction_2eproto_getter() {
  return &descriptor_table_pb_2ftransaction_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_pb_2ftransaction_2eproto(&descriptor_table_pb_2ftransaction_2eproto);
namespace pb {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PayloadType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pb_2ftransaction_2eproto);
  return file_level_enum_descriptors_pb_2ftransaction_2eproto[0];
}
bool PayloadType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class UnsignedTx::_Internal {
 public:
  static const ::pb::Payload& payload(const UnsignedTx* msg);
};

const ::pb::Payload&
UnsignedTx::_Internal::payload(const UnsignedTx* msg) {
  return *msg->_impl_.payload_;
}
UnsignedTx::UnsignedTx(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pb.UnsignedTx)
}
UnsignedTx::UnsignedTx(const UnsignedTx& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UnsignedTx* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.attributes_){}
    , decltype(_impl_.payload_){nullptr}
    , decltype(_impl_.nonce_){}
    , decltype(_impl_.fee_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.attributes_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attributes_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_attributes().empty()) {
    _this->_impl_.attributes_.Set(from._internal_attributes(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_payload()) {
    _this->_impl_.payload_ = new ::pb::Payload(*from._impl_.payload_);
  }
  ::memcpy(&_impl_.nonce_, &from._impl_.nonce_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.fee_) -
    reinterpret_cast<char*>(&_impl_.nonce_)) + sizeof(_impl_.fee_));
  // @@protoc_insertion_point(copy_constructor:pb.UnsignedTx)
}

inline void UnsignedTx::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.attributes_){}
    , decltype(_impl_.payload_){nullptr}
    , decltype(_impl_.nonce_){uint64_t{0u}}
    , decltype(_impl_.fee_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.attributes_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attributes_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UnsignedTx::~UnsignedTx() {
  // @@protoc_insertion_point(destructor:pb.UnsignedTx)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UnsignedTx::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.attributes_.Destroy();
  if (this != internal_default_instance()) delete _impl_.payload_;
}

void UnsignedTx::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UnsignedTx::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.UnsignedTx)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.attributes_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.payload_ != nullptr) {
    delete _impl_.payload_;
  }
  _impl_.payload_ = nullptr;
  ::memset(&_impl_.nonce_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.fee_) -
      reinterpret_cast<char*>(&_impl_.nonce_)) + sizeof(_impl_.fee_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnsignedTx::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .pb.Payload payload = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_payload(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 nonce = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.nonce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 fee = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.fee_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes attributes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_attributes();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UnsignedTx::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.UnsignedTx)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.Payload payload = 1;
  if (this->_internal_has_payload()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::payload(this),
        _Internal::payload(this).GetCachedSize(), target, stream);
  }

  // uint64 nonce = 2;
  if (this->_internal_nonce() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_nonce(), target);
  }

  // int64 fee = 3;
  if (this->_internal_fee() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_fee(), target);
  }

  // bytes attributes = 4;
  if (!this->_internal_attributes().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_attributes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.UnsignedTx)
  return target;
}

size_t UnsignedTx::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.UnsignedTx)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes attributes = 4;
  if (!this->_internal_attributes().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_attributes());
  }

  // .pb.Payload payload = 1;
  if (this->_internal_has_payload()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.payload_);
  }

  // uint64 nonce = 2;
  if (this->_internal_nonce() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_nonce());
  }

  // int64 fee = 3;
  if (this->_internal_fee() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_fee());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UnsignedTx::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UnsignedTx::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UnsignedTx::GetClassData() const { return &_class_data_; }


void UnsignedTx::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UnsignedTx*>(&to_msg);
  auto& from = static_cast<const UnsignedTx&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pb.UnsignedTx)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_attributes().empty()) {
    _this->_internal_set_attributes(from._internal_attributes());
  }
  if (from._internal_has_payload()) {
    _this->_internal_mutable_payload()->::pb::Payload::MergeFrom(
        from._internal_payload());
  }
  if (from._internal_nonce() != 0) {
    _this->_internal_set_nonce(from._internal_nonce());
  }
  if (from._internal_fee() != 0) {
    _this->_internal_set_fee(from._internal_fee());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UnsignedTx::CopyFrom(const UnsignedTx& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.UnsignedTx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnsignedTx::IsInitialized() const {
  return true;
}

void UnsignedTx::InternalSwap(UnsignedTx* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.attributes_, lhs_arena,
      &other->_impl_.attributes_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UnsignedTx, _impl_.fee_)
      + sizeof(UnsignedTx::_impl_.fee_)
      - PROTOBUF_FIELD_OFFSET(UnsignedTx, _impl_.payload_)>(
          reinterpret_cast<char*>(&_impl_.payload_),
          reinterpret_cast<char*>(&other->_impl_.payload_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UnsignedTx::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pb_2ftransaction_2eproto_getter, &descriptor_table_pb_2ftransaction_2eproto_once,
      file_level_metadata_pb_2ftransaction_2eproto[0]);
}

// ===================================================================

class Transaction::_Internal {
 public:
  static const ::pb::UnsignedTx& unsigned_tx(const Transaction* msg);
};

const ::pb::UnsignedTx&
Transaction::_Internal::unsigned_tx(const Transaction* msg) {
  return *msg->_impl_.unsigned_tx_;
}
Transaction::Transaction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pb.Transaction)
}
Transaction::Transaction(const Transaction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Transaction* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.programs_){from._impl_.programs_}
    , decltype(_impl_.unsigned_tx_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_unsigned_tx()) {
    _this->_impl_.unsigned_tx_ = new ::pb::UnsignedTx(*from._impl_.unsigned_tx_);
  }
  // @@protoc_insertion_point(copy_constructor:pb.Transaction)
}

inline void Transaction::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.programs_){arena}
    , decltype(_impl_.unsigned_tx_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Transaction::~Transaction() {
  // @@protoc_insertion_point(destructor:pb.Transaction)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Transaction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.programs_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.unsigned_tx_;
}

void Transaction::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Transaction::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.Transaction)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.programs_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.unsigned_tx_ != nullptr) {
    delete _impl_.unsigned_tx_;
  }
  _impl_.unsigned_tx_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Transaction::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .pb.UnsignedTx unsigned_tx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_unsigned_tx(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .pb.Program programs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_programs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Transaction::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.Transaction)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.UnsignedTx unsigned_tx = 1;
  if (this->_internal_has_unsigned_tx()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::unsigned_tx(this),
        _Internal::unsigned_tx(this).GetCachedSize(), target, stream);
  }

  // repeated .pb.Program programs = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_programs_size()); i < n; i++) {
    const auto& repfield = this->_internal_programs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.Transaction)
  return target;
}

size_t Transaction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.Transaction)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.Program programs = 2;
  total_size += 1UL * this->_internal_programs_size();
  for (const auto& msg : this->_impl_.programs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .pb.UnsignedTx unsigned_tx = 1;
  if (this->_internal_has_unsigned_tx()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.unsigned_tx_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Transaction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Transaction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Transaction::GetClassData() const { return &_class_data_; }


void Transaction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Transaction*>(&to_msg);
  auto& from = static_cast<const Transaction&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pb.Transaction)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.programs_.MergeFrom(from._impl_.programs_);
  if (from._internal_has_unsigned_tx()) {
    _this->_internal_mutable_unsigned_tx()->::pb::UnsignedTx::MergeFrom(
        from._internal_unsigned_tx());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Transaction::CopyFrom(const Transaction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.Transaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transaction::IsInitialized() const {
  return true;
}

void Transaction::InternalSwap(Transaction* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.programs_.InternalSwap(&other->_impl_.programs_);
  swap(_impl_.unsigned_tx_, other->_impl_.unsigned_tx_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Transaction::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pb_2ftransaction_2eproto_getter, &descriptor_table_pb_2ftransaction_2eproto_once,
      file_level_metadata_pb_2ftransaction_2eproto[1]);
}

// ===================================================================

class Program::_Internal {
 public:
};

Program::Program(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pb.Program)
}
Program::Program(const Program& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Program* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.code_){}
    , decltype(_impl_.parameter_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_code().empty()) {
    _this->_impl_.code_.Set(from._internal_code(), 
      _this->GetArenaForAllocation());
  }
  _impl_.parameter_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.parameter_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_parameter().empty()) {
    _this->_impl_.parameter_.Set(from._internal_parameter(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:pb.Program)
}

inline void Program::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.code_){}
    , decltype(_impl_.parameter_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.parameter_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.parameter_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Program::~Program() {
  // @@protoc_insertion_point(destructor:pb.Program)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Program::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.code_.Destroy();
  _impl_.parameter_.Destroy();
}

void Program::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Program::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.Program)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.code_.ClearToEmpty();
  _impl_.parameter_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Program::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes parameter = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_parameter();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Program::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.Program)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes code = 1;
  if (!this->_internal_code().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_code(), target);
  }

  // bytes parameter = 2;
  if (!this->_internal_parameter().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_parameter(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.Program)
  return target;
}

size_t Program::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.Program)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes code = 1;
  if (!this->_internal_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_code());
  }

  // bytes parameter = 2;
  if (!this->_internal_parameter().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_parameter());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Program::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Program::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Program::GetClassData() const { return &_class_data_; }


void Program::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Program*>(&to_msg);
  auto& from = static_cast<const Program&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pb.Program)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_code().empty()) {
    _this->_internal_set_code(from._internal_code());
  }
  if (!from._internal_parameter().empty()) {
    _this->_internal_set_parameter(from._internal_parameter());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Program::CopyFrom(const Program& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.Program)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Program::IsInitialized() const {
  return true;
}

void Program::InternalSwap(Program* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.code_, lhs_arena,
      &other->_impl_.code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.parameter_, lhs_arena,
      &other->_impl_.parameter_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Program::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pb_2ftransaction_2eproto_getter, &descriptor_table_pb_2ftransaction_2eproto_once,
      file_level_metadata_pb_2ftransaction_2eproto[2]);
}

// ===================================================================

class Payload::_Internal {
 public:
};

Payload::Payload(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pb.Payload)
}
Payload::Payload(const Payload& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Payload* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.type_ = from._impl_.type_;
  // @@protoc_insertion_point(copy_constructor:pb.Payload)
}

inline void Payload::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , decltype(_impl_.type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Payload::~Payload() {
  // @@protoc_insertion_point(destructor:pb.Payload)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Payload::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.Destroy();
}

void Payload::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Payload::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.Payload)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.ClearToEmpty();
  _impl_.type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Payload::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .pb.PayloadType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::pb::PayloadType>(val));
        } else
          goto handle_unusual;
        continue;
      // bytes data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Payload::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.Payload)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.PayloadType type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // bytes data = 2;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.Payload)
  return target;
}

size_t Payload::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.Payload)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 2;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // .pb.PayloadType type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Payload::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Payload::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Payload::GetClassData() const { return &_class_data_; }


void Payload::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Payload*>(&to_msg);
  auto& from = static_cast<const Payload&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pb.Payload)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Payload::CopyFrom(const Payload& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.Payload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Payload::IsInitialized() const {
  return true;
}

void Payload::InternalSwap(Payload* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
  swap(_impl_.type_, other->_impl_.type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Payload::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pb_2ftransaction_2eproto_getter, &descriptor_table_pb_2ftransaction_2eproto_once,
      file_level_metadata_pb_2ftransaction_2eproto[3]);
}

// ===================================================================

class Coinbase::_Internal {
 public:
};

Coinbase::Coinbase(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pb.Coinbase)
}
Coinbase::Coinbase(const Coinbase& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Coinbase* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sender_){}
    , decltype(_impl_.recipient_){}
    , decltype(_impl_.amount_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sender_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sender_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sender().empty()) {
    _this->_impl_.sender_.Set(from._internal_sender(), 
      _this->GetArenaForAllocation());
  }
  _impl_.recipient_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.recipient_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_recipient().empty()) {
    _this->_impl_.recipient_.Set(from._internal_recipient(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.amount_ = from._impl_.amount_;
  // @@protoc_insertion_point(copy_constructor:pb.Coinbase)
}

inline void Coinbase::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.sender_){}
    , decltype(_impl_.recipient_){}
    , decltype(_impl_.amount_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.sender_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sender_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.recipient_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.recipient_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Coinbase::~Coinbase() {
  // @@protoc_insertion_point(destructor:pb.Coinbase)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Coinbase::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sender_.Destroy();
  _impl_.recipient_.Destroy();
}

void Coinbase::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Coinbase::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.Coinbase)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sender_.ClearToEmpty();
  _impl_.recipient_.ClearToEmpty();
  _impl_.amount_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Coinbase::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes sender = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sender();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes recipient = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_recipient();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 amount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Coinbase::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.Coinbase)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes sender = 1;
  if (!this->_internal_sender().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_sender(), target);
  }

  // bytes recipient = 2;
  if (!this->_internal_recipient().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_recipient(), target);
  }

  // int64 amount = 3;
  if (this->_internal_amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_amount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.Coinbase)
  return target;
}

size_t Coinbase::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.Coinbase)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes sender = 1;
  if (!this->_internal_sender().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_sender());
  }

  // bytes recipient = 2;
  if (!this->_internal_recipient().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_recipient());
  }

  // int64 amount = 3;
  if (this->_internal_amount() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_amount());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Coinbase::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Coinbase::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Coinbase::GetClassData() const { return &_class_data_; }


void Coinbase::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Coinbase*>(&to_msg);
  auto& from = static_cast<const Coinbase&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pb.Coinbase)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sender().empty()) {
    _this->_internal_set_sender(from._internal_sender());
  }
  if (!from._internal_recipient().empty()) {
    _this->_internal_set_recipient(from._internal_recipient());
  }
  if (from._internal_amount() != 0) {
    _this->_internal_set_amount(from._internal_amount());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Coinbase::CopyFrom(const Coinbase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.Coinbase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Coinbase::IsInitialized() const {
  return true;
}

void Coinbase::InternalSwap(Coinbase* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sender_, lhs_arena,
      &other->_impl_.sender_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.recipient_, lhs_arena,
      &other->_impl_.recipient_, rhs_arena
  );
  swap(_impl_.amount_, other->_impl_.amount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Coinbase::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pb_2ftransaction_2eproto_getter, &descriptor_table_pb_2ftransaction_2eproto_once,
      file_level_metadata_pb_2ftransaction_2eproto[4]);
}

// ===================================================================

class SigChainTxn::_Internal {
 public:
};

SigChainTxn::SigChainTxn(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pb.SigChainTxn)
}
SigChainTxn::SigChainTxn(const SigChainTxn& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SigChainTxn* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sig_chain_){}
    , decltype(_impl_.submitter_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sig_chain_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sig_chain_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sig_chain().empty()) {
    _this->_impl_.sig_chain_.Set(from._internal_sig_chain(), 
      _this->GetArenaForAllocation());
  }
  _impl_.submitter_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.submitter_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_submitter().empty()) {
    _this->_impl_.submitter_.Set(from._internal_submitter(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:pb.SigChainTxn)
}

inline void SigChainTxn::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.sig_chain_){}
    , decltype(_impl_.submitter_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.sig_chain_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sig_chain_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.submitter_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.submitter_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SigChainTxn::~SigChainTxn() {
  // @@protoc_insertion_point(destructor:pb.SigChainTxn)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SigChainTxn::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sig_chain_.Destroy();
  _impl_.submitter_.Destroy();
}

void SigChainTxn::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SigChainTxn::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.SigChainTxn)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sig_chain_.ClearToEmpty();
  _impl_.submitter_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SigChainTxn::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes sig_chain = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sig_chain();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes submitter = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_submitter();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SigChainTxn::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.SigChainTxn)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes sig_chain = 1;
  if (!this->_internal_sig_chain().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_sig_chain(), target);
  }

  // bytes submitter = 2;
  if (!this->_internal_submitter().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_submitter(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.SigChainTxn)
  return target;
}

size_t SigChainTxn::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.SigChainTxn)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes sig_chain = 1;
  if (!this->_internal_sig_chain().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_sig_chain());
  }

  // bytes submitter = 2;
  if (!this->_internal_submitter().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_submitter());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SigChainTxn::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SigChainTxn::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SigChainTxn::GetClassData() const { return &_class_data_; }


void SigChainTxn::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SigChainTxn*>(&to_msg);
  auto& from = static_cast<const SigChainTxn&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pb.SigChainTxn)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sig_chain().empty()) {
    _this->_internal_set_sig_chain(from._internal_sig_chain());
  }
  if (!from._internal_submitter().empty()) {
    _this->_internal_set_submitter(from._internal_submitter());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SigChainTxn::CopyFrom(const SigChainTxn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.SigChainTxn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SigChainTxn::IsInitialized() const {
  return true;
}

void SigChainTxn::InternalSwap(SigChainTxn* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sig_chain_, lhs_arena,
      &other->_impl_.sig_chain_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.submitter_, lhs_arena,
      &other->_impl_.submitter_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SigChainTxn::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pb_2ftransaction_2eproto_getter, &descriptor_table_pb_2ftransaction_2eproto_once,
      file_level_metadata_pb_2ftransaction_2eproto[5]);
}

// ===================================================================

class RegisterName::_Internal {
 public:
};

RegisterName::RegisterName(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pb.RegisterName)
}
RegisterName::RegisterName(const RegisterName& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RegisterName* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.registrant_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.registration_fee_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.registrant_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.registrant_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_registrant().empty()) {
    _this->_impl_.registrant_.Set(from._internal_registrant(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.registration_fee_ = from._impl_.registration_fee_;
  // @@protoc_insertion_point(copy_constructor:pb.RegisterName)
}

inline void RegisterName::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.registrant_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.registration_fee_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.registrant_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.registrant_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RegisterName::~RegisterName() {
  // @@protoc_insertion_point(destructor:pb.RegisterName)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RegisterName::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.registrant_.Destroy();
  _impl_.name_.Destroy();
}

void RegisterName::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RegisterName::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.RegisterName)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.registrant_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.registration_fee_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegisterName::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes registrant = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_registrant();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "pb.RegisterName.name"));
        } else
          goto handle_unusual;
        continue;
      // int64 registration_fee = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.registration_fee_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RegisterName::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.RegisterName)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes registrant = 1;
  if (!this->_internal_registrant().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_registrant(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.RegisterName.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // int64 registration_fee = 3;
  if (this->_internal_registration_fee() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_registration_fee(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.RegisterName)
  return target;
}

size_t RegisterName::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.RegisterName)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes registrant = 1;
  if (!this->_internal_registrant().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_registrant());
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int64 registration_fee = 3;
  if (this->_internal_registration_fee() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_registration_fee());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegisterName::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RegisterName::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegisterName::GetClassData() const { return &_class_data_; }


void RegisterName::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RegisterName*>(&to_msg);
  auto& from = static_cast<const RegisterName&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pb.RegisterName)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_registrant().empty()) {
    _this->_internal_set_registrant(from._internal_registrant());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_registration_fee() != 0) {
    _this->_internal_set_registration_fee(from._internal_registration_fee());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RegisterName::CopyFrom(const RegisterName& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.RegisterName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterName::IsInitialized() const {
  return true;
}

void RegisterName::InternalSwap(RegisterName* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.registrant_, lhs_arena,
      &other->_impl_.registrant_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.registration_fee_, other->_impl_.registration_fee_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisterName::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pb_2ftransaction_2eproto_getter, &descriptor_table_pb_2ftransaction_2eproto_once,
      file_level_metadata_pb_2ftransaction_2eproto[6]);
}

// ===================================================================

class TransferName::_Internal {
 public:
};

TransferName::TransferName(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pb.TransferName)
}
TransferName::TransferName(const TransferName& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TransferName* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.registrant_){}
    , decltype(_impl_.recipient_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.registrant_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.registrant_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_registrant().empty()) {
    _this->_impl_.registrant_.Set(from._internal_registrant(), 
      _this->GetArenaForAllocation());
  }
  _impl_.recipient_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.recipient_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_recipient().empty()) {
    _this->_impl_.recipient_.Set(from._internal_recipient(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:pb.TransferName)
}

inline void TransferName::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.registrant_){}
    , decltype(_impl_.recipient_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.registrant_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.registrant_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.recipient_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.recipient_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TransferName::~TransferName() {
  // @@protoc_insertion_point(destructor:pb.TransferName)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TransferName::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.registrant_.Destroy();
  _impl_.recipient_.Destroy();
}

void TransferName::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TransferName::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.TransferName)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.registrant_.ClearToEmpty();
  _impl_.recipient_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransferName::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "pb.TransferName.name"));
        } else
          goto handle_unusual;
        continue;
      // bytes registrant = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_registrant();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes recipient = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_recipient();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TransferName::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TransferName)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.TransferName.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // bytes registrant = 2;
  if (!this->_internal_registrant().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_registrant(), target);
  }

  // bytes recipient = 3;
  if (!this->_internal_recipient().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_recipient(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TransferName)
  return target;
}

size_t TransferName::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.TransferName)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // bytes registrant = 2;
  if (!this->_internal_registrant().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_registrant());
  }

  // bytes recipient = 3;
  if (!this->_internal_recipient().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_recipient());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TransferName::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TransferName::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TransferName::GetClassData() const { return &_class_data_; }


void TransferName::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TransferName*>(&to_msg);
  auto& from = static_cast<const TransferName&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pb.TransferName)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_registrant().empty()) {
    _this->_internal_set_registrant(from._internal_registrant());
  }
  if (!from._internal_recipient().empty()) {
    _this->_internal_set_recipient(from._internal_recipient());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TransferName::CopyFrom(const TransferName& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.TransferName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransferName::IsInitialized() const {
  return true;
}

void TransferName::InternalSwap(TransferName* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.registrant_, lhs_arena,
      &other->_impl_.registrant_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.recipient_, lhs_arena,
      &other->_impl_.recipient_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata TransferName::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pb_2ftransaction_2eproto_getter, &descriptor_table_pb_2ftransaction_2eproto_once,
      file_level_metadata_pb_2ftransaction_2eproto[7]);
}

// ===================================================================

class DeleteName::_Internal {
 public:
};

DeleteName::DeleteName(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pb.DeleteName)
}
DeleteName::DeleteName(const DeleteName& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeleteName* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.registrant_){}
    , decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.registrant_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.registrant_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_registrant().empty()) {
    _this->_impl_.registrant_.Set(from._internal_registrant(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:pb.DeleteName)
}

inline void DeleteName::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.registrant_){}
    , decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.registrant_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.registrant_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DeleteName::~DeleteName() {
  // @@protoc_insertion_point(destructor:pb.DeleteName)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeleteName::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.registrant_.Destroy();
  _impl_.name_.Destroy();
}

void DeleteName::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeleteName::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.DeleteName)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.registrant_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteName::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes registrant = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_registrant();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "pb.DeleteName.name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteName::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.DeleteName)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes registrant = 1;
  if (!this->_internal_registrant().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_registrant(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.DeleteName.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.DeleteName)
  return target;
}

size_t DeleteName::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.DeleteName)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes registrant = 1;
  if (!this->_internal_registrant().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_registrant());
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteName::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeleteName::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteName::GetClassData() const { return &_class_data_; }


void DeleteName::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeleteName*>(&to_msg);
  auto& from = static_cast<const DeleteName&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pb.DeleteName)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_registrant().empty()) {
    _this->_internal_set_registrant(from._internal_registrant());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteName::CopyFrom(const DeleteName& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.DeleteName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteName::IsInitialized() const {
  return true;
}

void DeleteName::InternalSwap(DeleteName* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.registrant_, lhs_arena,
      &other->_impl_.registrant_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteName::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pb_2ftransaction_2eproto_getter, &descriptor_table_pb_2ftransaction_2eproto_once,
      file_level_metadata_pb_2ftransaction_2eproto[8]);
}

// ===================================================================

class Subscribe::_Internal {
 public:
};

Subscribe::Subscribe(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pb.Subscribe)
}
Subscribe::Subscribe(const Subscribe& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Subscribe* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.subscriber_){}
    , decltype(_impl_.identifier_){}
    , decltype(_impl_.topic_){}
    , decltype(_impl_.meta_){}
    , decltype(_impl_.bucket_){}
    , decltype(_impl_.duration_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.subscriber_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.subscriber_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_subscriber().empty()) {
    _this->_impl_.subscriber_.Set(from._internal_subscriber(), 
      _this->GetArenaForAllocation());
  }
  _impl_.identifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.identifier_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_identifier().empty()) {
    _this->_impl_.identifier_.Set(from._internal_identifier(), 
      _this->GetArenaForAllocation());
  }
  _impl_.topic_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.topic_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_topic().empty()) {
    _this->_impl_.topic_.Set(from._internal_topic(), 
      _this->GetArenaForAllocation());
  }
  _impl_.meta_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.meta_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_meta().empty()) {
    _this->_impl_.meta_.Set(from._internal_meta(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.bucket_, &from._impl_.bucket_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.duration_) -
    reinterpret_cast<char*>(&_impl_.bucket_)) + sizeof(_impl_.duration_));
  // @@protoc_insertion_point(copy_constructor:pb.Subscribe)
}

inline void Subscribe::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.subscriber_){}
    , decltype(_impl_.identifier_){}
    , decltype(_impl_.topic_){}
    , decltype(_impl_.meta_){}
    , decltype(_impl_.bucket_){0u}
    , decltype(_impl_.duration_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.subscriber_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.subscriber_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.identifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.identifier_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.topic_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.topic_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.meta_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.meta_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Subscribe::~Subscribe() {
  // @@protoc_insertion_point(destructor:pb.Subscribe)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Subscribe::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.subscriber_.Destroy();
  _impl_.identifier_.Destroy();
  _impl_.topic_.Destroy();
  _impl_.meta_.Destroy();
}

void Subscribe::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Subscribe::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.Subscribe)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.subscriber_.ClearToEmpty();
  _impl_.identifier_.ClearToEmpty();
  _impl_.topic_.ClearToEmpty();
  _impl_.meta_.ClearToEmpty();
  ::memset(&_impl_.bucket_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.duration_) -
      reinterpret_cast<char*>(&_impl_.bucket_)) + sizeof(_impl_.duration_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Subscribe::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes subscriber = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_subscriber();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string identifier = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_identifier();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "pb.Subscribe.identifier"));
        } else
          goto handle_unusual;
        continue;
      // string topic = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_topic();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "pb.Subscribe.topic"));
        } else
          goto handle_unusual;
        continue;
      // uint32 bucket = 4 [deprecated = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.bucket_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 duration = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes meta = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_meta();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Subscribe::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.Subscribe)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes subscriber = 1;
  if (!this->_internal_subscriber().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_subscriber(), target);
  }

  // string identifier = 2;
  if (!this->_internal_identifier().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_identifier().data(), static_cast<int>(this->_internal_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.Subscribe.identifier");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_identifier(), target);
  }

  // string topic = 3;
  if (!this->_internal_topic().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_topic().data(), static_cast<int>(this->_internal_topic().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.Subscribe.topic");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_topic(), target);
  }

  // uint32 bucket = 4 [deprecated = true];
  if (this->_internal_bucket() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_bucket(), target);
  }

  // uint32 duration = 5;
  if (this->_internal_duration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_duration(), target);
  }

  // bytes meta = 6;
  if (!this->_internal_meta().empty()) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_meta(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.Subscribe)
  return target;
}

size_t Subscribe::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.Subscribe)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes subscriber = 1;
  if (!this->_internal_subscriber().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_subscriber());
  }

  // string identifier = 2;
  if (!this->_internal_identifier().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_identifier());
  }

  // string topic = 3;
  if (!this->_internal_topic().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_topic());
  }

  // bytes meta = 6;
  if (!this->_internal_meta().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_meta());
  }

  // uint32 bucket = 4 [deprecated = true];
  if (this->_internal_bucket() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_bucket());
  }

  // uint32 duration = 5;
  if (this->_internal_duration() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_duration());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Subscribe::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Subscribe::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Subscribe::GetClassData() const { return &_class_data_; }


void Subscribe::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Subscribe*>(&to_msg);
  auto& from = static_cast<const Subscribe&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pb.Subscribe)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_subscriber().empty()) {
    _this->_internal_set_subscriber(from._internal_subscriber());
  }
  if (!from._internal_identifier().empty()) {
    _this->_internal_set_identifier(from._internal_identifier());
  }
  if (!from._internal_topic().empty()) {
    _this->_internal_set_topic(from._internal_topic());
  }
  if (!from._internal_meta().empty()) {
    _this->_internal_set_meta(from._internal_meta());
  }
  if (from._internal_bucket() != 0) {
    _this->_internal_set_bucket(from._internal_bucket());
  }
  if (from._internal_duration() != 0) {
    _this->_internal_set_duration(from._internal_duration());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Subscribe::CopyFrom(const Subscribe& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.Subscribe)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Subscribe::IsInitialized() const {
  return true;
}

void Subscribe::InternalSwap(Subscribe* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.subscriber_, lhs_arena,
      &other->_impl_.subscriber_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.identifier_, lhs_arena,
      &other->_impl_.identifier_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.topic_, lhs_arena,
      &other->_impl_.topic_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.meta_, lhs_arena,
      &other->_impl_.meta_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Subscribe, _impl_.duration_)
      + sizeof(Subscribe::_impl_.duration_)
      - PROTOBUF_FIELD_OFFSET(Subscribe, _impl_.bucket_)>(
          reinterpret_cast<char*>(&_impl_.bucket_),
          reinterpret_cast<char*>(&other->_impl_.bucket_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Subscribe::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pb_2ftransaction_2eproto_getter, &descriptor_table_pb_2ftransaction_2eproto_once,
      file_level_metadata_pb_2ftransaction_2eproto[9]);
}

// ===================================================================

class Unsubscribe::_Internal {
 public:
};

Unsubscribe::Unsubscribe(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pb.Unsubscribe)
}
Unsubscribe::Unsubscribe(const Unsubscribe& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Unsubscribe* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.subscriber_){}
    , decltype(_impl_.identifier_){}
    , decltype(_impl_.topic_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.subscriber_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.subscriber_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_subscriber().empty()) {
    _this->_impl_.subscriber_.Set(from._internal_subscriber(), 
      _this->GetArenaForAllocation());
  }
  _impl_.identifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.identifier_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_identifier().empty()) {
    _this->_impl_.identifier_.Set(from._internal_identifier(), 
      _this->GetArenaForAllocation());
  }
  _impl_.topic_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.topic_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_topic().empty()) {
    _this->_impl_.topic_.Set(from._internal_topic(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:pb.Unsubscribe)
}

inline void Unsubscribe::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.subscriber_){}
    , decltype(_impl_.identifier_){}
    , decltype(_impl_.topic_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.subscriber_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.subscriber_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.identifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.identifier_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.topic_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.topic_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Unsubscribe::~Unsubscribe() {
  // @@protoc_insertion_point(destructor:pb.Unsubscribe)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Unsubscribe::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.subscriber_.Destroy();
  _impl_.identifier_.Destroy();
  _impl_.topic_.Destroy();
}

void Unsubscribe::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Unsubscribe::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.Unsubscribe)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.subscriber_.ClearToEmpty();
  _impl_.identifier_.ClearToEmpty();
  _impl_.topic_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Unsubscribe::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes subscriber = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_subscriber();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string identifier = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_identifier();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "pb.Unsubscribe.identifier"));
        } else
          goto handle_unusual;
        continue;
      // string topic = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_topic();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "pb.Unsubscribe.topic"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Unsubscribe::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.Unsubscribe)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes subscriber = 1;
  if (!this->_internal_subscriber().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_subscriber(), target);
  }

  // string identifier = 2;
  if (!this->_internal_identifier().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_identifier().data(), static_cast<int>(this->_internal_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.Unsubscribe.identifier");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_identifier(), target);
  }

  // string topic = 3;
  if (!this->_internal_topic().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_topic().data(), static_cast<int>(this->_internal_topic().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.Unsubscribe.topic");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_topic(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.Unsubscribe)
  return target;
}

size_t Unsubscribe::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.Unsubscribe)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes subscriber = 1;
  if (!this->_internal_subscriber().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_subscriber());
  }

  // string identifier = 2;
  if (!this->_internal_identifier().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_identifier());
  }

  // string topic = 3;
  if (!this->_internal_topic().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_topic());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Unsubscribe::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Unsubscribe::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Unsubscribe::GetClassData() const { return &_class_data_; }


void Unsubscribe::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Unsubscribe*>(&to_msg);
  auto& from = static_cast<const Unsubscribe&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pb.Unsubscribe)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_subscriber().empty()) {
    _this->_internal_set_subscriber(from._internal_subscriber());
  }
  if (!from._internal_identifier().empty()) {
    _this->_internal_set_identifier(from._internal_identifier());
  }
  if (!from._internal_topic().empty()) {
    _this->_internal_set_topic(from._internal_topic());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Unsubscribe::CopyFrom(const Unsubscribe& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.Unsubscribe)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Unsubscribe::IsInitialized() const {
  return true;
}

void Unsubscribe::InternalSwap(Unsubscribe* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.subscriber_, lhs_arena,
      &other->_impl_.subscriber_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.identifier_, lhs_arena,
      &other->_impl_.identifier_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.topic_, lhs_arena,
      &other->_impl_.topic_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Unsubscribe::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pb_2ftransaction_2eproto_getter, &descriptor_table_pb_2ftransaction_2eproto_once,
      file_level_metadata_pb_2ftransaction_2eproto[10]);
}

// ===================================================================

class TransferAsset::_Internal {
 public:
};

TransferAsset::TransferAsset(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pb.TransferAsset)
}
TransferAsset::TransferAsset(const TransferAsset& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TransferAsset* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sender_){}
    , decltype(_impl_.recipient_){}
    , decltype(_impl_.amount_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sender_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sender_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sender().empty()) {
    _this->_impl_.sender_.Set(from._internal_sender(), 
      _this->GetArenaForAllocation());
  }
  _impl_.recipient_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.recipient_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_recipient().empty()) {
    _this->_impl_.recipient_.Set(from._internal_recipient(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.amount_ = from._impl_.amount_;
  // @@protoc_insertion_point(copy_constructor:pb.TransferAsset)
}

inline void TransferAsset::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.sender_){}
    , decltype(_impl_.recipient_){}
    , decltype(_impl_.amount_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.sender_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sender_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.recipient_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.recipient_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TransferAsset::~TransferAsset() {
  // @@protoc_insertion_point(destructor:pb.TransferAsset)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TransferAsset::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sender_.Destroy();
  _impl_.recipient_.Destroy();
}

void TransferAsset::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TransferAsset::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.TransferAsset)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sender_.ClearToEmpty();
  _impl_.recipient_.ClearToEmpty();
  _impl_.amount_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransferAsset::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes sender = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sender();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes recipient = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_recipient();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 amount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TransferAsset::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TransferAsset)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes sender = 1;
  if (!this->_internal_sender().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_sender(), target);
  }

  // bytes recipient = 2;
  if (!this->_internal_recipient().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_recipient(), target);
  }

  // int64 amount = 3;
  if (this->_internal_amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_amount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TransferAsset)
  return target;
}

size_t TransferAsset::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.TransferAsset)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes sender = 1;
  if (!this->_internal_sender().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_sender());
  }

  // bytes recipient = 2;
  if (!this->_internal_recipient().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_recipient());
  }

  // int64 amount = 3;
  if (this->_internal_amount() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_amount());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TransferAsset::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TransferAsset::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TransferAsset::GetClassData() const { return &_class_data_; }


void TransferAsset::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TransferAsset*>(&to_msg);
  auto& from = static_cast<const TransferAsset&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pb.TransferAsset)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sender().empty()) {
    _this->_internal_set_sender(from._internal_sender());
  }
  if (!from._internal_recipient().empty()) {
    _this->_internal_set_recipient(from._internal_recipient());
  }
  if (from._internal_amount() != 0) {
    _this->_internal_set_amount(from._internal_amount());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TransferAsset::CopyFrom(const TransferAsset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.TransferAsset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransferAsset::IsInitialized() const {
  return true;
}

void TransferAsset::InternalSwap(TransferAsset* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sender_, lhs_arena,
      &other->_impl_.sender_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.recipient_, lhs_arena,
      &other->_impl_.recipient_, rhs_arena
  );
  swap(_impl_.amount_, other->_impl_.amount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransferAsset::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pb_2ftransaction_2eproto_getter, &descriptor_table_pb_2ftransaction_2eproto_once,
      file_level_metadata_pb_2ftransaction_2eproto[11]);
}

// ===================================================================

class GenerateID::_Internal {
 public:
};

GenerateID::GenerateID(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pb.GenerateID)
}
GenerateID::GenerateID(const GenerateID& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GenerateID* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.public_key_){}
    , decltype(_impl_.sender_){}
    , decltype(_impl_.registration_fee_){}
    , decltype(_impl_.version_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.public_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.public_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_public_key().empty()) {
    _this->_impl_.public_key_.Set(from._internal_public_key(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sender_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sender_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sender().empty()) {
    _this->_impl_.sender_.Set(from._internal_sender(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.registration_fee_, &from._impl_.registration_fee_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.version_) -
    reinterpret_cast<char*>(&_impl_.registration_fee_)) + sizeof(_impl_.version_));
  // @@protoc_insertion_point(copy_constructor:pb.GenerateID)
}

inline void GenerateID::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.public_key_){}
    , decltype(_impl_.sender_){}
    , decltype(_impl_.registration_fee_){int64_t{0}}
    , decltype(_impl_.version_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.public_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.public_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sender_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sender_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GenerateID::~GenerateID() {
  // @@protoc_insertion_point(destructor:pb.GenerateID)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GenerateID::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.public_key_.Destroy();
  _impl_.sender_.Destroy();
}

void GenerateID::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GenerateID::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.GenerateID)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.public_key_.ClearToEmpty();
  _impl_.sender_.ClearToEmpty();
  ::memset(&_impl_.registration_fee_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.version_) -
      reinterpret_cast<char*>(&_impl_.registration_fee_)) + sizeof(_impl_.version_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GenerateID::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes public_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_public_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 registration_fee = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.registration_fee_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes sender = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_sender();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 version = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GenerateID::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.GenerateID)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes public_key = 1;
  if (!this->_internal_public_key().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_public_key(), target);
  }

  // int64 registration_fee = 2;
  if (this->_internal_registration_fee() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_registration_fee(), target);
  }

  // bytes sender = 3;
  if (!this->_internal_sender().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_sender(), target);
  }

  // int32 version = 4;
  if (this->_internal_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.GenerateID)
  return target;
}

size_t GenerateID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.GenerateID)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes public_key = 1;
  if (!this->_internal_public_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_public_key());
  }

  // bytes sender = 3;
  if (!this->_internal_sender().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_sender());
  }

  // int64 registration_fee = 2;
  if (this->_internal_registration_fee() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_registration_fee());
  }

  // int32 version = 4;
  if (this->_internal_version() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GenerateID::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GenerateID::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GenerateID::GetClassData() const { return &_class_data_; }


void GenerateID::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GenerateID*>(&to_msg);
  auto& from = static_cast<const GenerateID&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pb.GenerateID)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_public_key().empty()) {
    _this->_internal_set_public_key(from._internal_public_key());
  }
  if (!from._internal_sender().empty()) {
    _this->_internal_set_sender(from._internal_sender());
  }
  if (from._internal_registration_fee() != 0) {
    _this->_internal_set_registration_fee(from._internal_registration_fee());
  }
  if (from._internal_version() != 0) {
    _this->_internal_set_version(from._internal_version());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GenerateID::CopyFrom(const GenerateID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.GenerateID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenerateID::IsInitialized() const {
  return true;
}

void GenerateID::InternalSwap(GenerateID* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.public_key_, lhs_arena,
      &other->_impl_.public_key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sender_, lhs_arena,
      &other->_impl_.sender_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GenerateID, _impl_.version_)
      + sizeof(GenerateID::_impl_.version_)
      - PROTOBUF_FIELD_OFFSET(GenerateID, _impl_.registration_fee_)>(
          reinterpret_cast<char*>(&_impl_.registration_fee_),
          reinterpret_cast<char*>(&other->_impl_.registration_fee_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GenerateID::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pb_2ftransaction_2eproto_getter, &descriptor_table_pb_2ftransaction_2eproto_once,
      file_level_metadata_pb_2ftransaction_2eproto[12]);
}

// ===================================================================

class NanoPay::_Internal {
 public:
};

NanoPay::NanoPay(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pb.NanoPay)
}
NanoPay::NanoPay(const NanoPay& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NanoPay* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sender_){}
    , decltype(_impl_.recipient_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.amount_){}
    , decltype(_impl_.txn_expiration_){}
    , decltype(_impl_.nano_pay_expiration_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sender_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sender_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sender().empty()) {
    _this->_impl_.sender_.Set(from._internal_sender(), 
      _this->GetArenaForAllocation());
  }
  _impl_.recipient_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.recipient_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_recipient().empty()) {
    _this->_impl_.recipient_.Set(from._internal_recipient(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.nano_pay_expiration_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.nano_pay_expiration_));
  // @@protoc_insertion_point(copy_constructor:pb.NanoPay)
}

inline void NanoPay::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.sender_){}
    , decltype(_impl_.recipient_){}
    , decltype(_impl_.id_){uint64_t{0u}}
    , decltype(_impl_.amount_){int64_t{0}}
    , decltype(_impl_.txn_expiration_){0u}
    , decltype(_impl_.nano_pay_expiration_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.sender_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sender_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.recipient_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.recipient_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

NanoPay::~NanoPay() {
  // @@protoc_insertion_point(destructor:pb.NanoPay)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NanoPay::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sender_.Destroy();
  _impl_.recipient_.Destroy();
}

void NanoPay::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NanoPay::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.NanoPay)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sender_.ClearToEmpty();
  _impl_.recipient_.ClearToEmpty();
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.nano_pay_expiration_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.nano_pay_expiration_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NanoPay::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes sender = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sender();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes recipient = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_recipient();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 amount = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 txn_expiration = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.txn_expiration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 nano_pay_expiration = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.nano_pay_expiration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NanoPay::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.NanoPay)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes sender = 1;
  if (!this->_internal_sender().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_sender(), target);
  }

  // bytes recipient = 2;
  if (!this->_internal_recipient().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_recipient(), target);
  }

  // uint64 id = 3;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_id(), target);
  }

  // int64 amount = 4;
  if (this->_internal_amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_amount(), target);
  }

  // uint32 txn_expiration = 5;
  if (this->_internal_txn_expiration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_txn_expiration(), target);
  }

  // uint32 nano_pay_expiration = 6;
  if (this->_internal_nano_pay_expiration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_nano_pay_expiration(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.NanoPay)
  return target;
}

size_t NanoPay::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.NanoPay)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes sender = 1;
  if (!this->_internal_sender().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_sender());
  }

  // bytes recipient = 2;
  if (!this->_internal_recipient().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_recipient());
  }

  // uint64 id = 3;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_id());
  }

  // int64 amount = 4;
  if (this->_internal_amount() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_amount());
  }

  // uint32 txn_expiration = 5;
  if (this->_internal_txn_expiration() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_txn_expiration());
  }

  // uint32 nano_pay_expiration = 6;
  if (this->_internal_nano_pay_expiration() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_nano_pay_expiration());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NanoPay::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NanoPay::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NanoPay::GetClassData() const { return &_class_data_; }


void NanoPay::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NanoPay*>(&to_msg);
  auto& from = static_cast<const NanoPay&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pb.NanoPay)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sender().empty()) {
    _this->_internal_set_sender(from._internal_sender());
  }
  if (!from._internal_recipient().empty()) {
    _this->_internal_set_recipient(from._internal_recipient());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_amount() != 0) {
    _this->_internal_set_amount(from._internal_amount());
  }
  if (from._internal_txn_expiration() != 0) {
    _this->_internal_set_txn_expiration(from._internal_txn_expiration());
  }
  if (from._internal_nano_pay_expiration() != 0) {
    _this->_internal_set_nano_pay_expiration(from._internal_nano_pay_expiration());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NanoPay::CopyFrom(const NanoPay& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.NanoPay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NanoPay::IsInitialized() const {
  return true;
}

void NanoPay::InternalSwap(NanoPay* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sender_, lhs_arena,
      &other->_impl_.sender_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.recipient_, lhs_arena,
      &other->_impl_.recipient_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NanoPay, _impl_.nano_pay_expiration_)
      + sizeof(NanoPay::_impl_.nano_pay_expiration_)
      - PROTOBUF_FIELD_OFFSET(NanoPay, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NanoPay::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pb_2ftransaction_2eproto_getter, &descriptor_table_pb_2ftransaction_2eproto_once,
      file_level_metadata_pb_2ftransaction_2eproto[13]);
}

// ===================================================================

class IssueAsset::_Internal {
 public:
};

IssueAsset::IssueAsset(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pb.IssueAsset)
}
IssueAsset::IssueAsset(const IssueAsset& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IssueAsset* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sender_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.symbol_){}
    , decltype(_impl_.total_supply_){}
    , decltype(_impl_.precision_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sender_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sender_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sender().empty()) {
    _this->_impl_.sender_.Set(from._internal_sender(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.symbol_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.symbol_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_symbol().empty()) {
    _this->_impl_.symbol_.Set(from._internal_symbol(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.total_supply_, &from._impl_.total_supply_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.precision_) -
    reinterpret_cast<char*>(&_impl_.total_supply_)) + sizeof(_impl_.precision_));
  // @@protoc_insertion_point(copy_constructor:pb.IssueAsset)
}

inline void IssueAsset::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.sender_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.symbol_){}
    , decltype(_impl_.total_supply_){int64_t{0}}
    , decltype(_impl_.precision_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.sender_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sender_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.symbol_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.symbol_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

IssueAsset::~IssueAsset() {
  // @@protoc_insertion_point(destructor:pb.IssueAsset)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IssueAsset::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sender_.Destroy();
  _impl_.name_.Destroy();
  _impl_.symbol_.Destroy();
}

void IssueAsset::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IssueAsset::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.IssueAsset)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sender_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.symbol_.ClearToEmpty();
  ::memset(&_impl_.total_supply_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.precision_) -
      reinterpret_cast<char*>(&_impl_.total_supply_)) + sizeof(_impl_.precision_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IssueAsset::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes sender = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sender();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "pb.IssueAsset.name"));
        } else
          goto handle_unusual;
        continue;
      // string symbol = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_symbol();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "pb.IssueAsset.symbol"));
        } else
          goto handle_unusual;
        continue;
      // int64 total_supply = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.total_supply_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 precision = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.precision_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IssueAsset::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.IssueAsset)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes sender = 1;
  if (!this->_internal_sender().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_sender(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.IssueAsset.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // string symbol = 3;
  if (!this->_internal_symbol().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_symbol().data(), static_cast<int>(this->_internal_symbol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.IssueAsset.symbol");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_symbol(), target);
  }

  // int64 total_supply = 4;
  if (this->_internal_total_supply() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_total_supply(), target);
  }

  // uint32 precision = 5;
  if (this->_internal_precision() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_precision(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.IssueAsset)
  return target;
}

size_t IssueAsset::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.IssueAsset)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes sender = 1;
  if (!this->_internal_sender().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_sender());
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string symbol = 3;
  if (!this->_internal_symbol().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_symbol());
  }

  // int64 total_supply = 4;
  if (this->_internal_total_supply() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_total_supply());
  }

  // uint32 precision = 5;
  if (this->_internal_precision() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_precision());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IssueAsset::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IssueAsset::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IssueAsset::GetClassData() const { return &_class_data_; }


void IssueAsset::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IssueAsset*>(&to_msg);
  auto& from = static_cast<const IssueAsset&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pb.IssueAsset)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sender().empty()) {
    _this->_internal_set_sender(from._internal_sender());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_symbol().empty()) {
    _this->_internal_set_symbol(from._internal_symbol());
  }
  if (from._internal_total_supply() != 0) {
    _this->_internal_set_total_supply(from._internal_total_supply());
  }
  if (from._internal_precision() != 0) {
    _this->_internal_set_precision(from._internal_precision());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IssueAsset::CopyFrom(const IssueAsset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.IssueAsset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IssueAsset::IsInitialized() const {
  return true;
}

void IssueAsset::InternalSwap(IssueAsset* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sender_, lhs_arena,
      &other->_impl_.sender_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.symbol_, lhs_arena,
      &other->_impl_.symbol_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IssueAsset, _impl_.precision_)
      + sizeof(IssueAsset::_impl_.precision_)
      - PROTOBUF_FIELD_OFFSET(IssueAsset, _impl_.total_supply_)>(
          reinterpret_cast<char*>(&_impl_.total_supply_),
          reinterpret_cast<char*>(&other->_impl_.total_supply_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IssueAsset::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pb_2ftransaction_2eproto_getter, &descriptor_table_pb_2ftransaction_2eproto_once,
      file_level_metadata_pb_2ftransaction_2eproto[14]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::UnsignedTx*
Arena::CreateMaybeMessage< ::pb::UnsignedTx >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::UnsignedTx >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::Transaction*
Arena::CreateMaybeMessage< ::pb::Transaction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::Transaction >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::Program*
Arena::CreateMaybeMessage< ::pb::Program >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::Program >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::Payload*
Arena::CreateMaybeMessage< ::pb::Payload >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::Payload >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::Coinbase*
Arena::CreateMaybeMessage< ::pb::Coinbase >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::Coinbase >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::SigChainTxn*
Arena::CreateMaybeMessage< ::pb::SigChainTxn >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::SigChainTxn >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::RegisterName*
Arena::CreateMaybeMessage< ::pb::RegisterName >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::RegisterName >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::TransferName*
Arena::CreateMaybeMessage< ::pb::TransferName >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::TransferName >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::DeleteName*
Arena::CreateMaybeMessage< ::pb::DeleteName >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::DeleteName >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::Subscribe*
Arena::CreateMaybeMessage< ::pb::Subscribe >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::Subscribe >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::Unsubscribe*
Arena::CreateMaybeMessage< ::pb::Unsubscribe >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::Unsubscribe >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::TransferAsset*
Arena::CreateMaybeMessage< ::pb::TransferAsset >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::TransferAsset >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::GenerateID*
Arena::CreateMaybeMessage< ::pb::GenerateID >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::GenerateID >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::NanoPay*
Arena::CreateMaybeMessage< ::pb::NanoPay >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::NanoPay >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::IssueAsset*
Arena::CreateMaybeMessage< ::pb::IssueAsset >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::IssueAsset >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
