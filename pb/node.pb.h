// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pb/node.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_pb_2fnode_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_pb_2fnode_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021009 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_pb_2fnode_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_pb_2fnode_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pb_2fnode_2eproto;
namespace pb {
class NodeData;
struct NodeDataDefaultTypeInternal;
extern NodeDataDefaultTypeInternal _NodeData_default_instance_;
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::NodeData* Arena::CreateMaybeMessage<::pb::NodeData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {

enum SyncState : int {
  WAIT_FOR_SYNCING = 0,
  SYNC_STARTED = 1,
  SYNC_FINISHED = 2,
  PERSIST_FINISHED = 3,
  SyncState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  SyncState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool SyncState_IsValid(int value);
constexpr SyncState SyncState_MIN = WAIT_FOR_SYNCING;
constexpr SyncState SyncState_MAX = PERSIST_FINISHED;
constexpr int SyncState_ARRAYSIZE = SyncState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SyncState_descriptor();
template<typename T>
inline const std::string& SyncState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SyncState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SyncState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SyncState_descriptor(), enum_t_value);
}
inline bool SyncState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SyncState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SyncState>(
    SyncState_descriptor(), name, value);
}
// ===================================================================

class NodeData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.NodeData) */ {
 public:
  inline NodeData() : NodeData(nullptr) {}
  ~NodeData() override;
  explicit PROTOBUF_CONSTEXPR NodeData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NodeData(const NodeData& from);
  NodeData(NodeData&& from) noexcept
    : NodeData() {
    *this = ::std::move(from);
  }

  inline NodeData& operator=(const NodeData& from) {
    CopyFrom(from);
    return *this;
  }
  inline NodeData& operator=(NodeData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NodeData& default_instance() {
    return *internal_default_instance();
  }
  static inline const NodeData* internal_default_instance() {
    return reinterpret_cast<const NodeData*>(
               &_NodeData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(NodeData& a, NodeData& b) {
    a.Swap(&b);
  }
  inline void Swap(NodeData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NodeData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NodeData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NodeData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NodeData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NodeData& from) {
    NodeData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.NodeData";
  }
  protected:
  explicit NodeData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPublicKeyFieldNumber = 1,
    kTlsWebsocketDomainFieldNumber = 5,
    kTlsJsonRpcDomainFieldNumber = 7,
    kWebsocketPortFieldNumber = 2,
    kJsonRpcPortFieldNumber = 3,
    kProtocolVersionFieldNumber = 4,
    kTlsWebsocketPortFieldNumber = 6,
    kTlsJsonRpcPortFieldNumber = 8,
  };
  // bytes public_key = 1;
  void clear_public_key();
  const std::string& public_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_public_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_public_key();
  PROTOBUF_NODISCARD std::string* release_public_key();
  void set_allocated_public_key(std::string* public_key);
  private:
  const std::string& _internal_public_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_public_key(const std::string& value);
  std::string* _internal_mutable_public_key();
  public:

  // string tls_websocket_domain = 5;
  void clear_tls_websocket_domain();
  const std::string& tls_websocket_domain() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tls_websocket_domain(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tls_websocket_domain();
  PROTOBUF_NODISCARD std::string* release_tls_websocket_domain();
  void set_allocated_tls_websocket_domain(std::string* tls_websocket_domain);
  private:
  const std::string& _internal_tls_websocket_domain() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tls_websocket_domain(const std::string& value);
  std::string* _internal_mutable_tls_websocket_domain();
  public:

  // string tls_json_rpc_domain = 7;
  void clear_tls_json_rpc_domain();
  const std::string& tls_json_rpc_domain() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tls_json_rpc_domain(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tls_json_rpc_domain();
  PROTOBUF_NODISCARD std::string* release_tls_json_rpc_domain();
  void set_allocated_tls_json_rpc_domain(std::string* tls_json_rpc_domain);
  private:
  const std::string& _internal_tls_json_rpc_domain() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tls_json_rpc_domain(const std::string& value);
  std::string* _internal_mutable_tls_json_rpc_domain();
  public:

  // uint32 websocket_port = 2;
  void clear_websocket_port();
  uint32_t websocket_port() const;
  void set_websocket_port(uint32_t value);
  private:
  uint32_t _internal_websocket_port() const;
  void _internal_set_websocket_port(uint32_t value);
  public:

  // uint32 json_rpc_port = 3;
  void clear_json_rpc_port();
  uint32_t json_rpc_port() const;
  void set_json_rpc_port(uint32_t value);
  private:
  uint32_t _internal_json_rpc_port() const;
  void _internal_set_json_rpc_port(uint32_t value);
  public:

  // uint32 protocol_version = 4;
  void clear_protocol_version();
  uint32_t protocol_version() const;
  void set_protocol_version(uint32_t value);
  private:
  uint32_t _internal_protocol_version() const;
  void _internal_set_protocol_version(uint32_t value);
  public:

  // uint32 tls_websocket_port = 6;
  void clear_tls_websocket_port();
  uint32_t tls_websocket_port() const;
  void set_tls_websocket_port(uint32_t value);
  private:
  uint32_t _internal_tls_websocket_port() const;
  void _internal_set_tls_websocket_port(uint32_t value);
  public:

  // uint32 tls_json_rpc_port = 8;
  void clear_tls_json_rpc_port();
  uint32_t tls_json_rpc_port() const;
  void set_tls_json_rpc_port(uint32_t value);
  private:
  uint32_t _internal_tls_json_rpc_port() const;
  void _internal_set_tls_json_rpc_port(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:pb.NodeData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr public_key_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tls_websocket_domain_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tls_json_rpc_domain_;
    uint32_t websocket_port_;
    uint32_t json_rpc_port_;
    uint32_t protocol_version_;
    uint32_t tls_websocket_port_;
    uint32_t tls_json_rpc_port_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_pb_2fnode_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NodeData

// bytes public_key = 1;
inline void NodeData::clear_public_key() {
  _impl_.public_key_.ClearToEmpty();
}
inline const std::string& NodeData::public_key() const {
  // @@protoc_insertion_point(field_get:pb.NodeData.public_key)
  return _internal_public_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NodeData::set_public_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.public_key_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.NodeData.public_key)
}
inline std::string* NodeData::mutable_public_key() {
  std::string* _s = _internal_mutable_public_key();
  // @@protoc_insertion_point(field_mutable:pb.NodeData.public_key)
  return _s;
}
inline const std::string& NodeData::_internal_public_key() const {
  return _impl_.public_key_.Get();
}
inline void NodeData::_internal_set_public_key(const std::string& value) {
  
  _impl_.public_key_.Set(value, GetArenaForAllocation());
}
inline std::string* NodeData::_internal_mutable_public_key() {
  
  return _impl_.public_key_.Mutable(GetArenaForAllocation());
}
inline std::string* NodeData::release_public_key() {
  // @@protoc_insertion_point(field_release:pb.NodeData.public_key)
  return _impl_.public_key_.Release();
}
inline void NodeData::set_allocated_public_key(std::string* public_key) {
  if (public_key != nullptr) {
    
  } else {
    
  }
  _impl_.public_key_.SetAllocated(public_key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.public_key_.IsDefault()) {
    _impl_.public_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pb.NodeData.public_key)
}

// uint32 websocket_port = 2;
inline void NodeData::clear_websocket_port() {
  _impl_.websocket_port_ = 0u;
}
inline uint32_t NodeData::_internal_websocket_port() const {
  return _impl_.websocket_port_;
}
inline uint32_t NodeData::websocket_port() const {
  // @@protoc_insertion_point(field_get:pb.NodeData.websocket_port)
  return _internal_websocket_port();
}
inline void NodeData::_internal_set_websocket_port(uint32_t value) {
  
  _impl_.websocket_port_ = value;
}
inline void NodeData::set_websocket_port(uint32_t value) {
  _internal_set_websocket_port(value);
  // @@protoc_insertion_point(field_set:pb.NodeData.websocket_port)
}

// uint32 json_rpc_port = 3;
inline void NodeData::clear_json_rpc_port() {
  _impl_.json_rpc_port_ = 0u;
}
inline uint32_t NodeData::_internal_json_rpc_port() const {
  return _impl_.json_rpc_port_;
}
inline uint32_t NodeData::json_rpc_port() const {
  // @@protoc_insertion_point(field_get:pb.NodeData.json_rpc_port)
  return _internal_json_rpc_port();
}
inline void NodeData::_internal_set_json_rpc_port(uint32_t value) {
  
  _impl_.json_rpc_port_ = value;
}
inline void NodeData::set_json_rpc_port(uint32_t value) {
  _internal_set_json_rpc_port(value);
  // @@protoc_insertion_point(field_set:pb.NodeData.json_rpc_port)
}

// uint32 protocol_version = 4;
inline void NodeData::clear_protocol_version() {
  _impl_.protocol_version_ = 0u;
}
inline uint32_t NodeData::_internal_protocol_version() const {
  return _impl_.protocol_version_;
}
inline uint32_t NodeData::protocol_version() const {
  // @@protoc_insertion_point(field_get:pb.NodeData.protocol_version)
  return _internal_protocol_version();
}
inline void NodeData::_internal_set_protocol_version(uint32_t value) {
  
  _impl_.protocol_version_ = value;
}
inline void NodeData::set_protocol_version(uint32_t value) {
  _internal_set_protocol_version(value);
  // @@protoc_insertion_point(field_set:pb.NodeData.protocol_version)
}

// string tls_websocket_domain = 5;
inline void NodeData::clear_tls_websocket_domain() {
  _impl_.tls_websocket_domain_.ClearToEmpty();
}
inline const std::string& NodeData::tls_websocket_domain() const {
  // @@protoc_insertion_point(field_get:pb.NodeData.tls_websocket_domain)
  return _internal_tls_websocket_domain();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NodeData::set_tls_websocket_domain(ArgT0&& arg0, ArgT... args) {
 
 _impl_.tls_websocket_domain_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.NodeData.tls_websocket_domain)
}
inline std::string* NodeData::mutable_tls_websocket_domain() {
  std::string* _s = _internal_mutable_tls_websocket_domain();
  // @@protoc_insertion_point(field_mutable:pb.NodeData.tls_websocket_domain)
  return _s;
}
inline const std::string& NodeData::_internal_tls_websocket_domain() const {
  return _impl_.tls_websocket_domain_.Get();
}
inline void NodeData::_internal_set_tls_websocket_domain(const std::string& value) {
  
  _impl_.tls_websocket_domain_.Set(value, GetArenaForAllocation());
}
inline std::string* NodeData::_internal_mutable_tls_websocket_domain() {
  
  return _impl_.tls_websocket_domain_.Mutable(GetArenaForAllocation());
}
inline std::string* NodeData::release_tls_websocket_domain() {
  // @@protoc_insertion_point(field_release:pb.NodeData.tls_websocket_domain)
  return _impl_.tls_websocket_domain_.Release();
}
inline void NodeData::set_allocated_tls_websocket_domain(std::string* tls_websocket_domain) {
  if (tls_websocket_domain != nullptr) {
    
  } else {
    
  }
  _impl_.tls_websocket_domain_.SetAllocated(tls_websocket_domain, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.tls_websocket_domain_.IsDefault()) {
    _impl_.tls_websocket_domain_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pb.NodeData.tls_websocket_domain)
}

// uint32 tls_websocket_port = 6;
inline void NodeData::clear_tls_websocket_port() {
  _impl_.tls_websocket_port_ = 0u;
}
inline uint32_t NodeData::_internal_tls_websocket_port() const {
  return _impl_.tls_websocket_port_;
}
inline uint32_t NodeData::tls_websocket_port() const {
  // @@protoc_insertion_point(field_get:pb.NodeData.tls_websocket_port)
  return _internal_tls_websocket_port();
}
inline void NodeData::_internal_set_tls_websocket_port(uint32_t value) {
  
  _impl_.tls_websocket_port_ = value;
}
inline void NodeData::set_tls_websocket_port(uint32_t value) {
  _internal_set_tls_websocket_port(value);
  // @@protoc_insertion_point(field_set:pb.NodeData.tls_websocket_port)
}

// string tls_json_rpc_domain = 7;
inline void NodeData::clear_tls_json_rpc_domain() {
  _impl_.tls_json_rpc_domain_.ClearToEmpty();
}
inline const std::string& NodeData::tls_json_rpc_domain() const {
  // @@protoc_insertion_point(field_get:pb.NodeData.tls_json_rpc_domain)
  return _internal_tls_json_rpc_domain();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NodeData::set_tls_json_rpc_domain(ArgT0&& arg0, ArgT... args) {
 
 _impl_.tls_json_rpc_domain_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.NodeData.tls_json_rpc_domain)
}
inline std::string* NodeData::mutable_tls_json_rpc_domain() {
  std::string* _s = _internal_mutable_tls_json_rpc_domain();
  // @@protoc_insertion_point(field_mutable:pb.NodeData.tls_json_rpc_domain)
  return _s;
}
inline const std::string& NodeData::_internal_tls_json_rpc_domain() const {
  return _impl_.tls_json_rpc_domain_.Get();
}
inline void NodeData::_internal_set_tls_json_rpc_domain(const std::string& value) {
  
  _impl_.tls_json_rpc_domain_.Set(value, GetArenaForAllocation());
}
inline std::string* NodeData::_internal_mutable_tls_json_rpc_domain() {
  
  return _impl_.tls_json_rpc_domain_.Mutable(GetArenaForAllocation());
}
inline std::string* NodeData::release_tls_json_rpc_domain() {
  // @@protoc_insertion_point(field_release:pb.NodeData.tls_json_rpc_domain)
  return _impl_.tls_json_rpc_domain_.Release();
}
inline void NodeData::set_allocated_tls_json_rpc_domain(std::string* tls_json_rpc_domain) {
  if (tls_json_rpc_domain != nullptr) {
    
  } else {
    
  }
  _impl_.tls_json_rpc_domain_.SetAllocated(tls_json_rpc_domain, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.tls_json_rpc_domain_.IsDefault()) {
    _impl_.tls_json_rpc_domain_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pb.NodeData.tls_json_rpc_domain)
}

// uint32 tls_json_rpc_port = 8;
inline void NodeData::clear_tls_json_rpc_port() {
  _impl_.tls_json_rpc_port_ = 0u;
}
inline uint32_t NodeData::_internal_tls_json_rpc_port() const {
  return _impl_.tls_json_rpc_port_;
}
inline uint32_t NodeData::tls_json_rpc_port() const {
  // @@protoc_insertion_point(field_get:pb.NodeData.tls_json_rpc_port)
  return _internal_tls_json_rpc_port();
}
inline void NodeData::_internal_set_tls_json_rpc_port(uint32_t value) {
  
  _impl_.tls_json_rpc_port_ = value;
}
inline void NodeData::set_tls_json_rpc_port(uint32_t value) {
  _internal_set_tls_json_rpc_port(value);
  // @@protoc_insertion_point(field_set:pb.NodeData.tls_json_rpc_port)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::pb::SyncState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::SyncState>() {
  return ::pb::SyncState_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_pb_2fnode_2eproto
