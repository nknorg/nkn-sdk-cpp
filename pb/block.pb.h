// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pb/block.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_pb_2fblock_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_pb_2fblock_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021009 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "pb/transaction.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_pb_2fblock_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_pb_2fblock_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pb_2fblock_2eproto;
namespace pb {
class Block;
struct BlockDefaultTypeInternal;
extern BlockDefaultTypeInternal _Block_default_instance_;
class Header;
struct HeaderDefaultTypeInternal;
extern HeaderDefaultTypeInternal _Header_default_instance_;
class UnsignedHeader;
struct UnsignedHeaderDefaultTypeInternal;
extern UnsignedHeaderDefaultTypeInternal _UnsignedHeader_default_instance_;
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::Block* Arena::CreateMaybeMessage<::pb::Block>(Arena*);
template<> ::pb::Header* Arena::CreateMaybeMessage<::pb::Header>(Arena*);
template<> ::pb::UnsignedHeader* Arena::CreateMaybeMessage<::pb::UnsignedHeader>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {

enum WinnerType : int {
  GENESIS_SIGNER = 0,
  TXN_SIGNER = 1,
  BLOCK_SIGNER = 2,
  WinnerType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  WinnerType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool WinnerType_IsValid(int value);
constexpr WinnerType WinnerType_MIN = GENESIS_SIGNER;
constexpr WinnerType WinnerType_MAX = BLOCK_SIGNER;
constexpr int WinnerType_ARRAYSIZE = WinnerType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WinnerType_descriptor();
template<typename T>
inline const std::string& WinnerType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, WinnerType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function WinnerType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    WinnerType_descriptor(), enum_t_value);
}
inline bool WinnerType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, WinnerType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<WinnerType>(
    WinnerType_descriptor(), name, value);
}
// ===================================================================

class UnsignedHeader final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.UnsignedHeader) */ {
 public:
  inline UnsignedHeader() : UnsignedHeader(nullptr) {}
  ~UnsignedHeader() override;
  explicit PROTOBUF_CONSTEXPR UnsignedHeader(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UnsignedHeader(const UnsignedHeader& from);
  UnsignedHeader(UnsignedHeader&& from) noexcept
    : UnsignedHeader() {
    *this = ::std::move(from);
  }

  inline UnsignedHeader& operator=(const UnsignedHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnsignedHeader& operator=(UnsignedHeader&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UnsignedHeader& default_instance() {
    return *internal_default_instance();
  }
  static inline const UnsignedHeader* internal_default_instance() {
    return reinterpret_cast<const UnsignedHeader*>(
               &_UnsignedHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UnsignedHeader& a, UnsignedHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(UnsignedHeader* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnsignedHeader* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UnsignedHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UnsignedHeader>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UnsignedHeader& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UnsignedHeader& from) {
    UnsignedHeader::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnsignedHeader* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.UnsignedHeader";
  }
  protected:
  explicit UnsignedHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrevBlockHashFieldNumber = 2,
    kTransactionsRootFieldNumber = 3,
    kStateRootFieldNumber = 4,
    kRandomBeaconFieldNumber = 7,
    kWinnerHashFieldNumber = 8,
    kSignerPkFieldNumber = 10,
    kSignerIdFieldNumber = 11,
    kVersionFieldNumber = 1,
    kHeightFieldNumber = 6,
    kTimestampFieldNumber = 5,
    kWinnerTypeFieldNumber = 9,
  };
  // bytes prev_block_hash = 2;
  void clear_prev_block_hash();
  const std::string& prev_block_hash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_prev_block_hash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_prev_block_hash();
  PROTOBUF_NODISCARD std::string* release_prev_block_hash();
  void set_allocated_prev_block_hash(std::string* prev_block_hash);
  private:
  const std::string& _internal_prev_block_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_prev_block_hash(const std::string& value);
  std::string* _internal_mutable_prev_block_hash();
  public:

  // bytes transactions_root = 3;
  void clear_transactions_root();
  const std::string& transactions_root() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_transactions_root(ArgT0&& arg0, ArgT... args);
  std::string* mutable_transactions_root();
  PROTOBUF_NODISCARD std::string* release_transactions_root();
  void set_allocated_transactions_root(std::string* transactions_root);
  private:
  const std::string& _internal_transactions_root() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_transactions_root(const std::string& value);
  std::string* _internal_mutable_transactions_root();
  public:

  // bytes state_root = 4;
  void clear_state_root();
  const std::string& state_root() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_state_root(ArgT0&& arg0, ArgT... args);
  std::string* mutable_state_root();
  PROTOBUF_NODISCARD std::string* release_state_root();
  void set_allocated_state_root(std::string* state_root);
  private:
  const std::string& _internal_state_root() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_state_root(const std::string& value);
  std::string* _internal_mutable_state_root();
  public:

  // bytes random_beacon = 7;
  void clear_random_beacon();
  const std::string& random_beacon() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_random_beacon(ArgT0&& arg0, ArgT... args);
  std::string* mutable_random_beacon();
  PROTOBUF_NODISCARD std::string* release_random_beacon();
  void set_allocated_random_beacon(std::string* random_beacon);
  private:
  const std::string& _internal_random_beacon() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_random_beacon(const std::string& value);
  std::string* _internal_mutable_random_beacon();
  public:

  // bytes winner_hash = 8;
  void clear_winner_hash();
  const std::string& winner_hash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_winner_hash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_winner_hash();
  PROTOBUF_NODISCARD std::string* release_winner_hash();
  void set_allocated_winner_hash(std::string* winner_hash);
  private:
  const std::string& _internal_winner_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_winner_hash(const std::string& value);
  std::string* _internal_mutable_winner_hash();
  public:

  // bytes signer_pk = 10;
  void clear_signer_pk();
  const std::string& signer_pk() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_signer_pk(ArgT0&& arg0, ArgT... args);
  std::string* mutable_signer_pk();
  PROTOBUF_NODISCARD std::string* release_signer_pk();
  void set_allocated_signer_pk(std::string* signer_pk);
  private:
  const std::string& _internal_signer_pk() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_signer_pk(const std::string& value);
  std::string* _internal_mutable_signer_pk();
  public:

  // bytes signer_id = 11;
  void clear_signer_id();
  const std::string& signer_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_signer_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_signer_id();
  PROTOBUF_NODISCARD std::string* release_signer_id();
  void set_allocated_signer_id(std::string* signer_id);
  private:
  const std::string& _internal_signer_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_signer_id(const std::string& value);
  std::string* _internal_mutable_signer_id();
  public:

  // uint32 version = 1;
  void clear_version();
  uint32_t version() const;
  void set_version(uint32_t value);
  private:
  uint32_t _internal_version() const;
  void _internal_set_version(uint32_t value);
  public:

  // uint32 height = 6;
  void clear_height();
  uint32_t height() const;
  void set_height(uint32_t value);
  private:
  uint32_t _internal_height() const;
  void _internal_set_height(uint32_t value);
  public:

  // int64 timestamp = 5;
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // .pb.WinnerType winner_type = 9;
  void clear_winner_type();
  ::pb::WinnerType winner_type() const;
  void set_winner_type(::pb::WinnerType value);
  private:
  ::pb::WinnerType _internal_winner_type() const;
  void _internal_set_winner_type(::pb::WinnerType value);
  public:

  // @@protoc_insertion_point(class_scope:pb.UnsignedHeader)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prev_block_hash_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transactions_root_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr state_root_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr random_beacon_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr winner_hash_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signer_pk_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signer_id_;
    uint32_t version_;
    uint32_t height_;
    int64_t timestamp_;
    int winner_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_pb_2fblock_2eproto;
};
// -------------------------------------------------------------------

class Header final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.Header) */ {
 public:
  inline Header() : Header(nullptr) {}
  ~Header() override;
  explicit PROTOBUF_CONSTEXPR Header(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Header(const Header& from);
  Header(Header&& from) noexcept
    : Header() {
    *this = ::std::move(from);
  }

  inline Header& operator=(const Header& from) {
    CopyFrom(from);
    return *this;
  }
  inline Header& operator=(Header&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Header& default_instance() {
    return *internal_default_instance();
  }
  static inline const Header* internal_default_instance() {
    return reinterpret_cast<const Header*>(
               &_Header_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Header& a, Header& b) {
    a.Swap(&b);
  }
  inline void Swap(Header* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Header* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Header* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Header>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Header& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Header& from) {
    Header::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Header* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.Header";
  }
  protected:
  explicit Header(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSignatureFieldNumber = 2,
    kUnsignedHeaderFieldNumber = 1,
  };
  // bytes signature = 2;
  void clear_signature();
  const std::string& signature() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_signature(ArgT0&& arg0, ArgT... args);
  std::string* mutable_signature();
  PROTOBUF_NODISCARD std::string* release_signature();
  void set_allocated_signature(std::string* signature);
  private:
  const std::string& _internal_signature() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_signature(const std::string& value);
  std::string* _internal_mutable_signature();
  public:

  // .pb.UnsignedHeader unsigned_header = 1;
  bool has_unsigned_header() const;
  private:
  bool _internal_has_unsigned_header() const;
  public:
  void clear_unsigned_header();
  const ::pb::UnsignedHeader& unsigned_header() const;
  PROTOBUF_NODISCARD ::pb::UnsignedHeader* release_unsigned_header();
  ::pb::UnsignedHeader* mutable_unsigned_header();
  void set_allocated_unsigned_header(::pb::UnsignedHeader* unsigned_header);
  private:
  const ::pb::UnsignedHeader& _internal_unsigned_header() const;
  ::pb::UnsignedHeader* _internal_mutable_unsigned_header();
  public:
  void unsafe_arena_set_allocated_unsigned_header(
      ::pb::UnsignedHeader* unsigned_header);
  ::pb::UnsignedHeader* unsafe_arena_release_unsigned_header();

  // @@protoc_insertion_point(class_scope:pb.Header)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_;
    ::pb::UnsignedHeader* unsigned_header_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_pb_2fblock_2eproto;
};
// -------------------------------------------------------------------

class Block final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.Block) */ {
 public:
  inline Block() : Block(nullptr) {}
  ~Block() override;
  explicit PROTOBUF_CONSTEXPR Block(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Block(const Block& from);
  Block(Block&& from) noexcept
    : Block() {
    *this = ::std::move(from);
  }

  inline Block& operator=(const Block& from) {
    CopyFrom(from);
    return *this;
  }
  inline Block& operator=(Block&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Block& default_instance() {
    return *internal_default_instance();
  }
  static inline const Block* internal_default_instance() {
    return reinterpret_cast<const Block*>(
               &_Block_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Block& a, Block& b) {
    a.Swap(&b);
  }
  inline void Swap(Block* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Block* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Block* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Block>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Block& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Block& from) {
    Block::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Block* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.Block";
  }
  protected:
  explicit Block(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransactionsFieldNumber = 2,
    kHeaderFieldNumber = 1,
  };
  // repeated .pb.Transaction transactions = 2;
  int transactions_size() const;
  private:
  int _internal_transactions_size() const;
  public:
  void clear_transactions();
  ::pb::Transaction* mutable_transactions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::Transaction >*
      mutable_transactions();
  private:
  const ::pb::Transaction& _internal_transactions(int index) const;
  ::pb::Transaction* _internal_add_transactions();
  public:
  const ::pb::Transaction& transactions(int index) const;
  ::pb::Transaction* add_transactions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::Transaction >&
      transactions() const;

  // .pb.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::pb::Header& header() const;
  PROTOBUF_NODISCARD ::pb::Header* release_header();
  ::pb::Header* mutable_header();
  void set_allocated_header(::pb::Header* header);
  private:
  const ::pb::Header& _internal_header() const;
  ::pb::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::pb::Header* header);
  ::pb::Header* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:pb.Block)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::Transaction > transactions_;
    ::pb::Header* header_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_pb_2fblock_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UnsignedHeader

// uint32 version = 1;
inline void UnsignedHeader::clear_version() {
  _impl_.version_ = 0u;
}
inline uint32_t UnsignedHeader::_internal_version() const {
  return _impl_.version_;
}
inline uint32_t UnsignedHeader::version() const {
  // @@protoc_insertion_point(field_get:pb.UnsignedHeader.version)
  return _internal_version();
}
inline void UnsignedHeader::_internal_set_version(uint32_t value) {
  
  _impl_.version_ = value;
}
inline void UnsignedHeader::set_version(uint32_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:pb.UnsignedHeader.version)
}

// bytes prev_block_hash = 2;
inline void UnsignedHeader::clear_prev_block_hash() {
  _impl_.prev_block_hash_.ClearToEmpty();
}
inline const std::string& UnsignedHeader::prev_block_hash() const {
  // @@protoc_insertion_point(field_get:pb.UnsignedHeader.prev_block_hash)
  return _internal_prev_block_hash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UnsignedHeader::set_prev_block_hash(ArgT0&& arg0, ArgT... args) {
 
 _impl_.prev_block_hash_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.UnsignedHeader.prev_block_hash)
}
inline std::string* UnsignedHeader::mutable_prev_block_hash() {
  std::string* _s = _internal_mutable_prev_block_hash();
  // @@protoc_insertion_point(field_mutable:pb.UnsignedHeader.prev_block_hash)
  return _s;
}
inline const std::string& UnsignedHeader::_internal_prev_block_hash() const {
  return _impl_.prev_block_hash_.Get();
}
inline void UnsignedHeader::_internal_set_prev_block_hash(const std::string& value) {
  
  _impl_.prev_block_hash_.Set(value, GetArenaForAllocation());
}
inline std::string* UnsignedHeader::_internal_mutable_prev_block_hash() {
  
  return _impl_.prev_block_hash_.Mutable(GetArenaForAllocation());
}
inline std::string* UnsignedHeader::release_prev_block_hash() {
  // @@protoc_insertion_point(field_release:pb.UnsignedHeader.prev_block_hash)
  return _impl_.prev_block_hash_.Release();
}
inline void UnsignedHeader::set_allocated_prev_block_hash(std::string* prev_block_hash) {
  if (prev_block_hash != nullptr) {
    
  } else {
    
  }
  _impl_.prev_block_hash_.SetAllocated(prev_block_hash, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.prev_block_hash_.IsDefault()) {
    _impl_.prev_block_hash_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pb.UnsignedHeader.prev_block_hash)
}

// bytes transactions_root = 3;
inline void UnsignedHeader::clear_transactions_root() {
  _impl_.transactions_root_.ClearToEmpty();
}
inline const std::string& UnsignedHeader::transactions_root() const {
  // @@protoc_insertion_point(field_get:pb.UnsignedHeader.transactions_root)
  return _internal_transactions_root();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UnsignedHeader::set_transactions_root(ArgT0&& arg0, ArgT... args) {
 
 _impl_.transactions_root_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.UnsignedHeader.transactions_root)
}
inline std::string* UnsignedHeader::mutable_transactions_root() {
  std::string* _s = _internal_mutable_transactions_root();
  // @@protoc_insertion_point(field_mutable:pb.UnsignedHeader.transactions_root)
  return _s;
}
inline const std::string& UnsignedHeader::_internal_transactions_root() const {
  return _impl_.transactions_root_.Get();
}
inline void UnsignedHeader::_internal_set_transactions_root(const std::string& value) {
  
  _impl_.transactions_root_.Set(value, GetArenaForAllocation());
}
inline std::string* UnsignedHeader::_internal_mutable_transactions_root() {
  
  return _impl_.transactions_root_.Mutable(GetArenaForAllocation());
}
inline std::string* UnsignedHeader::release_transactions_root() {
  // @@protoc_insertion_point(field_release:pb.UnsignedHeader.transactions_root)
  return _impl_.transactions_root_.Release();
}
inline void UnsignedHeader::set_allocated_transactions_root(std::string* transactions_root) {
  if (transactions_root != nullptr) {
    
  } else {
    
  }
  _impl_.transactions_root_.SetAllocated(transactions_root, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.transactions_root_.IsDefault()) {
    _impl_.transactions_root_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pb.UnsignedHeader.transactions_root)
}

// bytes state_root = 4;
inline void UnsignedHeader::clear_state_root() {
  _impl_.state_root_.ClearToEmpty();
}
inline const std::string& UnsignedHeader::state_root() const {
  // @@protoc_insertion_point(field_get:pb.UnsignedHeader.state_root)
  return _internal_state_root();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UnsignedHeader::set_state_root(ArgT0&& arg0, ArgT... args) {
 
 _impl_.state_root_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.UnsignedHeader.state_root)
}
inline std::string* UnsignedHeader::mutable_state_root() {
  std::string* _s = _internal_mutable_state_root();
  // @@protoc_insertion_point(field_mutable:pb.UnsignedHeader.state_root)
  return _s;
}
inline const std::string& UnsignedHeader::_internal_state_root() const {
  return _impl_.state_root_.Get();
}
inline void UnsignedHeader::_internal_set_state_root(const std::string& value) {
  
  _impl_.state_root_.Set(value, GetArenaForAllocation());
}
inline std::string* UnsignedHeader::_internal_mutable_state_root() {
  
  return _impl_.state_root_.Mutable(GetArenaForAllocation());
}
inline std::string* UnsignedHeader::release_state_root() {
  // @@protoc_insertion_point(field_release:pb.UnsignedHeader.state_root)
  return _impl_.state_root_.Release();
}
inline void UnsignedHeader::set_allocated_state_root(std::string* state_root) {
  if (state_root != nullptr) {
    
  } else {
    
  }
  _impl_.state_root_.SetAllocated(state_root, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.state_root_.IsDefault()) {
    _impl_.state_root_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pb.UnsignedHeader.state_root)
}

// int64 timestamp = 5;
inline void UnsignedHeader::clear_timestamp() {
  _impl_.timestamp_ = int64_t{0};
}
inline int64_t UnsignedHeader::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline int64_t UnsignedHeader::timestamp() const {
  // @@protoc_insertion_point(field_get:pb.UnsignedHeader.timestamp)
  return _internal_timestamp();
}
inline void UnsignedHeader::_internal_set_timestamp(int64_t value) {
  
  _impl_.timestamp_ = value;
}
inline void UnsignedHeader::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:pb.UnsignedHeader.timestamp)
}

// uint32 height = 6;
inline void UnsignedHeader::clear_height() {
  _impl_.height_ = 0u;
}
inline uint32_t UnsignedHeader::_internal_height() const {
  return _impl_.height_;
}
inline uint32_t UnsignedHeader::height() const {
  // @@protoc_insertion_point(field_get:pb.UnsignedHeader.height)
  return _internal_height();
}
inline void UnsignedHeader::_internal_set_height(uint32_t value) {
  
  _impl_.height_ = value;
}
inline void UnsignedHeader::set_height(uint32_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:pb.UnsignedHeader.height)
}

// bytes random_beacon = 7;
inline void UnsignedHeader::clear_random_beacon() {
  _impl_.random_beacon_.ClearToEmpty();
}
inline const std::string& UnsignedHeader::random_beacon() const {
  // @@protoc_insertion_point(field_get:pb.UnsignedHeader.random_beacon)
  return _internal_random_beacon();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UnsignedHeader::set_random_beacon(ArgT0&& arg0, ArgT... args) {
 
 _impl_.random_beacon_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.UnsignedHeader.random_beacon)
}
inline std::string* UnsignedHeader::mutable_random_beacon() {
  std::string* _s = _internal_mutable_random_beacon();
  // @@protoc_insertion_point(field_mutable:pb.UnsignedHeader.random_beacon)
  return _s;
}
inline const std::string& UnsignedHeader::_internal_random_beacon() const {
  return _impl_.random_beacon_.Get();
}
inline void UnsignedHeader::_internal_set_random_beacon(const std::string& value) {
  
  _impl_.random_beacon_.Set(value, GetArenaForAllocation());
}
inline std::string* UnsignedHeader::_internal_mutable_random_beacon() {
  
  return _impl_.random_beacon_.Mutable(GetArenaForAllocation());
}
inline std::string* UnsignedHeader::release_random_beacon() {
  // @@protoc_insertion_point(field_release:pb.UnsignedHeader.random_beacon)
  return _impl_.random_beacon_.Release();
}
inline void UnsignedHeader::set_allocated_random_beacon(std::string* random_beacon) {
  if (random_beacon != nullptr) {
    
  } else {
    
  }
  _impl_.random_beacon_.SetAllocated(random_beacon, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.random_beacon_.IsDefault()) {
    _impl_.random_beacon_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pb.UnsignedHeader.random_beacon)
}

// bytes winner_hash = 8;
inline void UnsignedHeader::clear_winner_hash() {
  _impl_.winner_hash_.ClearToEmpty();
}
inline const std::string& UnsignedHeader::winner_hash() const {
  // @@protoc_insertion_point(field_get:pb.UnsignedHeader.winner_hash)
  return _internal_winner_hash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UnsignedHeader::set_winner_hash(ArgT0&& arg0, ArgT... args) {
 
 _impl_.winner_hash_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.UnsignedHeader.winner_hash)
}
inline std::string* UnsignedHeader::mutable_winner_hash() {
  std::string* _s = _internal_mutable_winner_hash();
  // @@protoc_insertion_point(field_mutable:pb.UnsignedHeader.winner_hash)
  return _s;
}
inline const std::string& UnsignedHeader::_internal_winner_hash() const {
  return _impl_.winner_hash_.Get();
}
inline void UnsignedHeader::_internal_set_winner_hash(const std::string& value) {
  
  _impl_.winner_hash_.Set(value, GetArenaForAllocation());
}
inline std::string* UnsignedHeader::_internal_mutable_winner_hash() {
  
  return _impl_.winner_hash_.Mutable(GetArenaForAllocation());
}
inline std::string* UnsignedHeader::release_winner_hash() {
  // @@protoc_insertion_point(field_release:pb.UnsignedHeader.winner_hash)
  return _impl_.winner_hash_.Release();
}
inline void UnsignedHeader::set_allocated_winner_hash(std::string* winner_hash) {
  if (winner_hash != nullptr) {
    
  } else {
    
  }
  _impl_.winner_hash_.SetAllocated(winner_hash, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.winner_hash_.IsDefault()) {
    _impl_.winner_hash_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pb.UnsignedHeader.winner_hash)
}

// .pb.WinnerType winner_type = 9;
inline void UnsignedHeader::clear_winner_type() {
  _impl_.winner_type_ = 0;
}
inline ::pb::WinnerType UnsignedHeader::_internal_winner_type() const {
  return static_cast< ::pb::WinnerType >(_impl_.winner_type_);
}
inline ::pb::WinnerType UnsignedHeader::winner_type() const {
  // @@protoc_insertion_point(field_get:pb.UnsignedHeader.winner_type)
  return _internal_winner_type();
}
inline void UnsignedHeader::_internal_set_winner_type(::pb::WinnerType value) {
  
  _impl_.winner_type_ = value;
}
inline void UnsignedHeader::set_winner_type(::pb::WinnerType value) {
  _internal_set_winner_type(value);
  // @@protoc_insertion_point(field_set:pb.UnsignedHeader.winner_type)
}

// bytes signer_pk = 10;
inline void UnsignedHeader::clear_signer_pk() {
  _impl_.signer_pk_.ClearToEmpty();
}
inline const std::string& UnsignedHeader::signer_pk() const {
  // @@protoc_insertion_point(field_get:pb.UnsignedHeader.signer_pk)
  return _internal_signer_pk();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UnsignedHeader::set_signer_pk(ArgT0&& arg0, ArgT... args) {
 
 _impl_.signer_pk_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.UnsignedHeader.signer_pk)
}
inline std::string* UnsignedHeader::mutable_signer_pk() {
  std::string* _s = _internal_mutable_signer_pk();
  // @@protoc_insertion_point(field_mutable:pb.UnsignedHeader.signer_pk)
  return _s;
}
inline const std::string& UnsignedHeader::_internal_signer_pk() const {
  return _impl_.signer_pk_.Get();
}
inline void UnsignedHeader::_internal_set_signer_pk(const std::string& value) {
  
  _impl_.signer_pk_.Set(value, GetArenaForAllocation());
}
inline std::string* UnsignedHeader::_internal_mutable_signer_pk() {
  
  return _impl_.signer_pk_.Mutable(GetArenaForAllocation());
}
inline std::string* UnsignedHeader::release_signer_pk() {
  // @@protoc_insertion_point(field_release:pb.UnsignedHeader.signer_pk)
  return _impl_.signer_pk_.Release();
}
inline void UnsignedHeader::set_allocated_signer_pk(std::string* signer_pk) {
  if (signer_pk != nullptr) {
    
  } else {
    
  }
  _impl_.signer_pk_.SetAllocated(signer_pk, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.signer_pk_.IsDefault()) {
    _impl_.signer_pk_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pb.UnsignedHeader.signer_pk)
}

// bytes signer_id = 11;
inline void UnsignedHeader::clear_signer_id() {
  _impl_.signer_id_.ClearToEmpty();
}
inline const std::string& UnsignedHeader::signer_id() const {
  // @@protoc_insertion_point(field_get:pb.UnsignedHeader.signer_id)
  return _internal_signer_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UnsignedHeader::set_signer_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.signer_id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.UnsignedHeader.signer_id)
}
inline std::string* UnsignedHeader::mutable_signer_id() {
  std::string* _s = _internal_mutable_signer_id();
  // @@protoc_insertion_point(field_mutable:pb.UnsignedHeader.signer_id)
  return _s;
}
inline const std::string& UnsignedHeader::_internal_signer_id() const {
  return _impl_.signer_id_.Get();
}
inline void UnsignedHeader::_internal_set_signer_id(const std::string& value) {
  
  _impl_.signer_id_.Set(value, GetArenaForAllocation());
}
inline std::string* UnsignedHeader::_internal_mutable_signer_id() {
  
  return _impl_.signer_id_.Mutable(GetArenaForAllocation());
}
inline std::string* UnsignedHeader::release_signer_id() {
  // @@protoc_insertion_point(field_release:pb.UnsignedHeader.signer_id)
  return _impl_.signer_id_.Release();
}
inline void UnsignedHeader::set_allocated_signer_id(std::string* signer_id) {
  if (signer_id != nullptr) {
    
  } else {
    
  }
  _impl_.signer_id_.SetAllocated(signer_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.signer_id_.IsDefault()) {
    _impl_.signer_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pb.UnsignedHeader.signer_id)
}

// -------------------------------------------------------------------

// Header

// .pb.UnsignedHeader unsigned_header = 1;
inline bool Header::_internal_has_unsigned_header() const {
  return this != internal_default_instance() && _impl_.unsigned_header_ != nullptr;
}
inline bool Header::has_unsigned_header() const {
  return _internal_has_unsigned_header();
}
inline void Header::clear_unsigned_header() {
  if (GetArenaForAllocation() == nullptr && _impl_.unsigned_header_ != nullptr) {
    delete _impl_.unsigned_header_;
  }
  _impl_.unsigned_header_ = nullptr;
}
inline const ::pb::UnsignedHeader& Header::_internal_unsigned_header() const {
  const ::pb::UnsignedHeader* p = _impl_.unsigned_header_;
  return p != nullptr ? *p : reinterpret_cast<const ::pb::UnsignedHeader&>(
      ::pb::_UnsignedHeader_default_instance_);
}
inline const ::pb::UnsignedHeader& Header::unsigned_header() const {
  // @@protoc_insertion_point(field_get:pb.Header.unsigned_header)
  return _internal_unsigned_header();
}
inline void Header::unsafe_arena_set_allocated_unsigned_header(
    ::pb::UnsignedHeader* unsigned_header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.unsigned_header_);
  }
  _impl_.unsigned_header_ = unsigned_header;
  if (unsigned_header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pb.Header.unsigned_header)
}
inline ::pb::UnsignedHeader* Header::release_unsigned_header() {
  
  ::pb::UnsignedHeader* temp = _impl_.unsigned_header_;
  _impl_.unsigned_header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::pb::UnsignedHeader* Header::unsafe_arena_release_unsigned_header() {
  // @@protoc_insertion_point(field_release:pb.Header.unsigned_header)
  
  ::pb::UnsignedHeader* temp = _impl_.unsigned_header_;
  _impl_.unsigned_header_ = nullptr;
  return temp;
}
inline ::pb::UnsignedHeader* Header::_internal_mutable_unsigned_header() {
  
  if (_impl_.unsigned_header_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::UnsignedHeader>(GetArenaForAllocation());
    _impl_.unsigned_header_ = p;
  }
  return _impl_.unsigned_header_;
}
inline ::pb::UnsignedHeader* Header::mutable_unsigned_header() {
  ::pb::UnsignedHeader* _msg = _internal_mutable_unsigned_header();
  // @@protoc_insertion_point(field_mutable:pb.Header.unsigned_header)
  return _msg;
}
inline void Header::set_allocated_unsigned_header(::pb::UnsignedHeader* unsigned_header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.unsigned_header_;
  }
  if (unsigned_header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(unsigned_header);
    if (message_arena != submessage_arena) {
      unsigned_header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, unsigned_header, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.unsigned_header_ = unsigned_header;
  // @@protoc_insertion_point(field_set_allocated:pb.Header.unsigned_header)
}

// bytes signature = 2;
inline void Header::clear_signature() {
  _impl_.signature_.ClearToEmpty();
}
inline const std::string& Header::signature() const {
  // @@protoc_insertion_point(field_get:pb.Header.signature)
  return _internal_signature();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Header::set_signature(ArgT0&& arg0, ArgT... args) {
 
 _impl_.signature_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.Header.signature)
}
inline std::string* Header::mutable_signature() {
  std::string* _s = _internal_mutable_signature();
  // @@protoc_insertion_point(field_mutable:pb.Header.signature)
  return _s;
}
inline const std::string& Header::_internal_signature() const {
  return _impl_.signature_.Get();
}
inline void Header::_internal_set_signature(const std::string& value) {
  
  _impl_.signature_.Set(value, GetArenaForAllocation());
}
inline std::string* Header::_internal_mutable_signature() {
  
  return _impl_.signature_.Mutable(GetArenaForAllocation());
}
inline std::string* Header::release_signature() {
  // @@protoc_insertion_point(field_release:pb.Header.signature)
  return _impl_.signature_.Release();
}
inline void Header::set_allocated_signature(std::string* signature) {
  if (signature != nullptr) {
    
  } else {
    
  }
  _impl_.signature_.SetAllocated(signature, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.signature_.IsDefault()) {
    _impl_.signature_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pb.Header.signature)
}

// -------------------------------------------------------------------

// Block

// .pb.Header header = 1;
inline bool Block::_internal_has_header() const {
  return this != internal_default_instance() && _impl_.header_ != nullptr;
}
inline bool Block::has_header() const {
  return _internal_has_header();
}
inline void Block::clear_header() {
  if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
    delete _impl_.header_;
  }
  _impl_.header_ = nullptr;
}
inline const ::pb::Header& Block::_internal_header() const {
  const ::pb::Header* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::pb::Header&>(
      ::pb::_Header_default_instance_);
}
inline const ::pb::Header& Block::header() const {
  // @@protoc_insertion_point(field_get:pb.Block.header)
  return _internal_header();
}
inline void Block::unsafe_arena_set_allocated_header(
    ::pb::Header* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pb.Block.header)
}
inline ::pb::Header* Block::release_header() {
  
  ::pb::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::pb::Header* Block::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:pb.Block.header)
  
  ::pb::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::pb::Header* Block::_internal_mutable_header() {
  
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::Header>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::pb::Header* Block::mutable_header() {
  ::pb::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:pb.Block.header)
  return _msg;
}
inline void Block::set_allocated_header(::pb::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:pb.Block.header)
}

// repeated .pb.Transaction transactions = 2;
inline int Block::_internal_transactions_size() const {
  return _impl_.transactions_.size();
}
inline int Block::transactions_size() const {
  return _internal_transactions_size();
}
inline ::pb::Transaction* Block::mutable_transactions(int index) {
  // @@protoc_insertion_point(field_mutable:pb.Block.transactions)
  return _impl_.transactions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::Transaction >*
Block::mutable_transactions() {
  // @@protoc_insertion_point(field_mutable_list:pb.Block.transactions)
  return &_impl_.transactions_;
}
inline const ::pb::Transaction& Block::_internal_transactions(int index) const {
  return _impl_.transactions_.Get(index);
}
inline const ::pb::Transaction& Block::transactions(int index) const {
  // @@protoc_insertion_point(field_get:pb.Block.transactions)
  return _internal_transactions(index);
}
inline ::pb::Transaction* Block::_internal_add_transactions() {
  return _impl_.transactions_.Add();
}
inline ::pb::Transaction* Block::add_transactions() {
  ::pb::Transaction* _add = _internal_add_transactions();
  // @@protoc_insertion_point(field_add:pb.Block.transactions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::Transaction >&
Block::transactions() const {
  // @@protoc_insertion_point(field_list:pb.Block.transactions)
  return _impl_.transactions_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::pb::WinnerType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::WinnerType>() {
  return ::pb::WinnerType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_pb_2fblock_2eproto
