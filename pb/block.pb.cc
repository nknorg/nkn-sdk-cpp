// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pb/block.proto

#include "pb/block.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace pb {
PROTOBUF_CONSTEXPR UnsignedHeader::UnsignedHeader(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.prev_block_hash_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.transactions_root_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.state_root_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.random_beacon_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.winner_hash_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.signer_pk_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.signer_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.version_)*/0u
  , /*decltype(_impl_.height_)*/0u
  , /*decltype(_impl_.timestamp_)*/int64_t{0}
  , /*decltype(_impl_.winner_type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UnsignedHeaderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UnsignedHeaderDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UnsignedHeaderDefaultTypeInternal() {}
  union {
    UnsignedHeader _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UnsignedHeaderDefaultTypeInternal _UnsignedHeader_default_instance_;
PROTOBUF_CONSTEXPR Header::Header(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.signature_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.unsigned_header_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HeaderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HeaderDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HeaderDefaultTypeInternal() {}
  union {
    Header _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HeaderDefaultTypeInternal _Header_default_instance_;
PROTOBUF_CONSTEXPR Block::Block(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.transactions_)*/{}
  , /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BlockDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BlockDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BlockDefaultTypeInternal() {}
  union {
    Block _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BlockDefaultTypeInternal _Block_default_instance_;
}  // namespace pb
static ::_pb::Metadata file_level_metadata_pb_2fblock_2eproto[3];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_pb_2fblock_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_pb_2fblock_2eproto = nullptr;

const uint32_t TableStruct_pb_2fblock_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::UnsignedHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pb::UnsignedHeader, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::pb::UnsignedHeader, _impl_.prev_block_hash_),
  PROTOBUF_FIELD_OFFSET(::pb::UnsignedHeader, _impl_.transactions_root_),
  PROTOBUF_FIELD_OFFSET(::pb::UnsignedHeader, _impl_.state_root_),
  PROTOBUF_FIELD_OFFSET(::pb::UnsignedHeader, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::pb::UnsignedHeader, _impl_.height_),
  PROTOBUF_FIELD_OFFSET(::pb::UnsignedHeader, _impl_.random_beacon_),
  PROTOBUF_FIELD_OFFSET(::pb::UnsignedHeader, _impl_.winner_hash_),
  PROTOBUF_FIELD_OFFSET(::pb::UnsignedHeader, _impl_.winner_type_),
  PROTOBUF_FIELD_OFFSET(::pb::UnsignedHeader, _impl_.signer_pk_),
  PROTOBUF_FIELD_OFFSET(::pb::UnsignedHeader, _impl_.signer_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::Header, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pb::Header, _impl_.unsigned_header_),
  PROTOBUF_FIELD_OFFSET(::pb::Header, _impl_.signature_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::Block, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pb::Block, _impl_.header_),
  PROTOBUF_FIELD_OFFSET(::pb::Block, _impl_.transactions_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::pb::UnsignedHeader)},
  { 17, -1, -1, sizeof(::pb::Header)},
  { 25, -1, -1, sizeof(::pb::Block)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::pb::_UnsignedHeader_default_instance_._instance,
  &::pb::_Header_default_instance_._instance,
  &::pb::_Block_default_instance_._instance,
};

const char descriptor_table_protodef_pb_2fblock_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016pb/block.proto\022\002pb\032\024pb/transaction.pro"
  "to\"\203\002\n\016UnsignedHeader\022\017\n\007version\030\001 \001(\r\022\027"
  "\n\017prev_block_hash\030\002 \001(\014\022\031\n\021transactions_"
  "root\030\003 \001(\014\022\022\n\nstate_root\030\004 \001(\014\022\021\n\ttimest"
  "amp\030\005 \001(\003\022\016\n\006height\030\006 \001(\r\022\025\n\rrandom_beac"
  "on\030\007 \001(\014\022\023\n\013winner_hash\030\010 \001(\014\022#\n\013winner_"
  "type\030\t \001(\0162\016.pb.WinnerType\022\021\n\tsigner_pk\030"
  "\n \001(\014\022\021\n\tsigner_id\030\013 \001(\014\"H\n\006Header\022+\n\017un"
  "signed_header\030\001 \001(\0132\022.pb.UnsignedHeader\022"
  "\021\n\tsignature\030\002 \001(\014\"J\n\005Block\022\032\n\006header\030\001 "
  "\001(\0132\n.pb.Header\022%\n\014transactions\030\002 \003(\0132\017."
  "pb.Transaction*B\n\nWinnerType\022\022\n\016GENESIS_"
  "SIGNER\020\000\022\016\n\nTXN_SIGNER\020\001\022\020\n\014BLOCK_SIGNER"
  "\020\002B\006Z\004./pbb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_pb_2fblock_2eproto_deps[1] = {
  &::descriptor_table_pb_2ftransaction_2eproto,
};
static ::_pbi::once_flag descriptor_table_pb_2fblock_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_pb_2fblock_2eproto = {
    false, false, 538, descriptor_table_protodef_pb_2fblock_2eproto,
    "pb/block.proto",
    &descriptor_table_pb_2fblock_2eproto_once, descriptor_table_pb_2fblock_2eproto_deps, 1, 3,
    schemas, file_default_instances, TableStruct_pb_2fblock_2eproto::offsets,
    file_level_metadata_pb_2fblock_2eproto, file_level_enum_descriptors_pb_2fblock_2eproto,
    file_level_service_descriptors_pb_2fblock_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_pb_2fblock_2eproto_getter() {
  return &descriptor_table_pb_2fblock_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_pb_2fblock_2eproto(&descriptor_table_pb_2fblock_2eproto);
namespace pb {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WinnerType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pb_2fblock_2eproto);
  return file_level_enum_descriptors_pb_2fblock_2eproto[0];
}
bool WinnerType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class UnsignedHeader::_Internal {
 public:
};

UnsignedHeader::UnsignedHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pb.UnsignedHeader)
}
UnsignedHeader::UnsignedHeader(const UnsignedHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UnsignedHeader* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.prev_block_hash_){}
    , decltype(_impl_.transactions_root_){}
    , decltype(_impl_.state_root_){}
    , decltype(_impl_.random_beacon_){}
    , decltype(_impl_.winner_hash_){}
    , decltype(_impl_.signer_pk_){}
    , decltype(_impl_.signer_id_){}
    , decltype(_impl_.version_){}
    , decltype(_impl_.height_){}
    , decltype(_impl_.timestamp_){}
    , decltype(_impl_.winner_type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.prev_block_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.prev_block_hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_prev_block_hash().empty()) {
    _this->_impl_.prev_block_hash_.Set(from._internal_prev_block_hash(), 
      _this->GetArenaForAllocation());
  }
  _impl_.transactions_root_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.transactions_root_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_transactions_root().empty()) {
    _this->_impl_.transactions_root_.Set(from._internal_transactions_root(), 
      _this->GetArenaForAllocation());
  }
  _impl_.state_root_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.state_root_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_state_root().empty()) {
    _this->_impl_.state_root_.Set(from._internal_state_root(), 
      _this->GetArenaForAllocation());
  }
  _impl_.random_beacon_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.random_beacon_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_random_beacon().empty()) {
    _this->_impl_.random_beacon_.Set(from._internal_random_beacon(), 
      _this->GetArenaForAllocation());
  }
  _impl_.winner_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.winner_hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_winner_hash().empty()) {
    _this->_impl_.winner_hash_.Set(from._internal_winner_hash(), 
      _this->GetArenaForAllocation());
  }
  _impl_.signer_pk_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.signer_pk_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_signer_pk().empty()) {
    _this->_impl_.signer_pk_.Set(from._internal_signer_pk(), 
      _this->GetArenaForAllocation());
  }
  _impl_.signer_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.signer_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_signer_id().empty()) {
    _this->_impl_.signer_id_.Set(from._internal_signer_id(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.version_, &from._impl_.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.winner_type_) -
    reinterpret_cast<char*>(&_impl_.version_)) + sizeof(_impl_.winner_type_));
  // @@protoc_insertion_point(copy_constructor:pb.UnsignedHeader)
}

inline void UnsignedHeader::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.prev_block_hash_){}
    , decltype(_impl_.transactions_root_){}
    , decltype(_impl_.state_root_){}
    , decltype(_impl_.random_beacon_){}
    , decltype(_impl_.winner_hash_){}
    , decltype(_impl_.signer_pk_){}
    , decltype(_impl_.signer_id_){}
    , decltype(_impl_.version_){0u}
    , decltype(_impl_.height_){0u}
    , decltype(_impl_.timestamp_){int64_t{0}}
    , decltype(_impl_.winner_type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.prev_block_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.prev_block_hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.transactions_root_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.transactions_root_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.state_root_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.state_root_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.random_beacon_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.random_beacon_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.winner_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.winner_hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.signer_pk_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.signer_pk_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.signer_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.signer_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UnsignedHeader::~UnsignedHeader() {
  // @@protoc_insertion_point(destructor:pb.UnsignedHeader)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UnsignedHeader::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.prev_block_hash_.Destroy();
  _impl_.transactions_root_.Destroy();
  _impl_.state_root_.Destroy();
  _impl_.random_beacon_.Destroy();
  _impl_.winner_hash_.Destroy();
  _impl_.signer_pk_.Destroy();
  _impl_.signer_id_.Destroy();
}

void UnsignedHeader::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UnsignedHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.UnsignedHeader)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.prev_block_hash_.ClearToEmpty();
  _impl_.transactions_root_.ClearToEmpty();
  _impl_.state_root_.ClearToEmpty();
  _impl_.random_beacon_.ClearToEmpty();
  _impl_.winner_hash_.ClearToEmpty();
  _impl_.signer_pk_.ClearToEmpty();
  _impl_.signer_id_.ClearToEmpty();
  ::memset(&_impl_.version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.winner_type_) -
      reinterpret_cast<char*>(&_impl_.version_)) + sizeof(_impl_.winner_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnsignedHeader::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes prev_block_hash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_prev_block_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes transactions_root = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_transactions_root();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes state_root = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_state_root();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 height = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes random_beacon = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_random_beacon();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes winner_hash = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_winner_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .pb.WinnerType winner_type = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_winner_type(static_cast<::pb::WinnerType>(val));
        } else
          goto handle_unusual;
        continue;
      // bytes signer_pk = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_signer_pk();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes signer_id = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_signer_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UnsignedHeader::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.UnsignedHeader)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 version = 1;
  if (this->_internal_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_version(), target);
  }

  // bytes prev_block_hash = 2;
  if (!this->_internal_prev_block_hash().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_prev_block_hash(), target);
  }

  // bytes transactions_root = 3;
  if (!this->_internal_transactions_root().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_transactions_root(), target);
  }

  // bytes state_root = 4;
  if (!this->_internal_state_root().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_state_root(), target);
  }

  // int64 timestamp = 5;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_timestamp(), target);
  }

  // uint32 height = 6;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_height(), target);
  }

  // bytes random_beacon = 7;
  if (!this->_internal_random_beacon().empty()) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_random_beacon(), target);
  }

  // bytes winner_hash = 8;
  if (!this->_internal_winner_hash().empty()) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_winner_hash(), target);
  }

  // .pb.WinnerType winner_type = 9;
  if (this->_internal_winner_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      9, this->_internal_winner_type(), target);
  }

  // bytes signer_pk = 10;
  if (!this->_internal_signer_pk().empty()) {
    target = stream->WriteBytesMaybeAliased(
        10, this->_internal_signer_pk(), target);
  }

  // bytes signer_id = 11;
  if (!this->_internal_signer_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        11, this->_internal_signer_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.UnsignedHeader)
  return target;
}

size_t UnsignedHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.UnsignedHeader)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes prev_block_hash = 2;
  if (!this->_internal_prev_block_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_prev_block_hash());
  }

  // bytes transactions_root = 3;
  if (!this->_internal_transactions_root().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_transactions_root());
  }

  // bytes state_root = 4;
  if (!this->_internal_state_root().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_state_root());
  }

  // bytes random_beacon = 7;
  if (!this->_internal_random_beacon().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_random_beacon());
  }

  // bytes winner_hash = 8;
  if (!this->_internal_winner_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_winner_hash());
  }

  // bytes signer_pk = 10;
  if (!this->_internal_signer_pk().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_signer_pk());
  }

  // bytes signer_id = 11;
  if (!this->_internal_signer_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_signer_id());
  }

  // uint32 version = 1;
  if (this->_internal_version() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_version());
  }

  // uint32 height = 6;
  if (this->_internal_height() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_height());
  }

  // int64 timestamp = 5;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp());
  }

  // .pb.WinnerType winner_type = 9;
  if (this->_internal_winner_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_winner_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UnsignedHeader::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UnsignedHeader::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UnsignedHeader::GetClassData() const { return &_class_data_; }


void UnsignedHeader::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UnsignedHeader*>(&to_msg);
  auto& from = static_cast<const UnsignedHeader&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pb.UnsignedHeader)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_prev_block_hash().empty()) {
    _this->_internal_set_prev_block_hash(from._internal_prev_block_hash());
  }
  if (!from._internal_transactions_root().empty()) {
    _this->_internal_set_transactions_root(from._internal_transactions_root());
  }
  if (!from._internal_state_root().empty()) {
    _this->_internal_set_state_root(from._internal_state_root());
  }
  if (!from._internal_random_beacon().empty()) {
    _this->_internal_set_random_beacon(from._internal_random_beacon());
  }
  if (!from._internal_winner_hash().empty()) {
    _this->_internal_set_winner_hash(from._internal_winner_hash());
  }
  if (!from._internal_signer_pk().empty()) {
    _this->_internal_set_signer_pk(from._internal_signer_pk());
  }
  if (!from._internal_signer_id().empty()) {
    _this->_internal_set_signer_id(from._internal_signer_id());
  }
  if (from._internal_version() != 0) {
    _this->_internal_set_version(from._internal_version());
  }
  if (from._internal_height() != 0) {
    _this->_internal_set_height(from._internal_height());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_winner_type() != 0) {
    _this->_internal_set_winner_type(from._internal_winner_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UnsignedHeader::CopyFrom(const UnsignedHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.UnsignedHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnsignedHeader::IsInitialized() const {
  return true;
}

void UnsignedHeader::InternalSwap(UnsignedHeader* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.prev_block_hash_, lhs_arena,
      &other->_impl_.prev_block_hash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.transactions_root_, lhs_arena,
      &other->_impl_.transactions_root_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.state_root_, lhs_arena,
      &other->_impl_.state_root_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.random_beacon_, lhs_arena,
      &other->_impl_.random_beacon_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.winner_hash_, lhs_arena,
      &other->_impl_.winner_hash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.signer_pk_, lhs_arena,
      &other->_impl_.signer_pk_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.signer_id_, lhs_arena,
      &other->_impl_.signer_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UnsignedHeader, _impl_.winner_type_)
      + sizeof(UnsignedHeader::_impl_.winner_type_)
      - PROTOBUF_FIELD_OFFSET(UnsignedHeader, _impl_.version_)>(
          reinterpret_cast<char*>(&_impl_.version_),
          reinterpret_cast<char*>(&other->_impl_.version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UnsignedHeader::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pb_2fblock_2eproto_getter, &descriptor_table_pb_2fblock_2eproto_once,
      file_level_metadata_pb_2fblock_2eproto[0]);
}

// ===================================================================

class Header::_Internal {
 public:
  static const ::pb::UnsignedHeader& unsigned_header(const Header* msg);
};

const ::pb::UnsignedHeader&
Header::_Internal::unsigned_header(const Header* msg) {
  return *msg->_impl_.unsigned_header_;
}
Header::Header(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pb.Header)
}
Header::Header(const Header& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Header* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.signature_){}
    , decltype(_impl_.unsigned_header_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.signature_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.signature_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_signature().empty()) {
    _this->_impl_.signature_.Set(from._internal_signature(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_unsigned_header()) {
    _this->_impl_.unsigned_header_ = new ::pb::UnsignedHeader(*from._impl_.unsigned_header_);
  }
  // @@protoc_insertion_point(copy_constructor:pb.Header)
}

inline void Header::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.signature_){}
    , decltype(_impl_.unsigned_header_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.signature_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.signature_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Header::~Header() {
  // @@protoc_insertion_point(destructor:pb.Header)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Header::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.signature_.Destroy();
  if (this != internal_default_instance()) delete _impl_.unsigned_header_;
}

void Header::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Header::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.Header)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.signature_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.unsigned_header_ != nullptr) {
    delete _impl_.unsigned_header_;
  }
  _impl_.unsigned_header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Header::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .pb.UnsignedHeader unsigned_header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_unsigned_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes signature = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_signature();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Header::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.Header)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.UnsignedHeader unsigned_header = 1;
  if (this->_internal_has_unsigned_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::unsigned_header(this),
        _Internal::unsigned_header(this).GetCachedSize(), target, stream);
  }

  // bytes signature = 2;
  if (!this->_internal_signature().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_signature(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.Header)
  return target;
}

size_t Header::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.Header)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes signature = 2;
  if (!this->_internal_signature().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_signature());
  }

  // .pb.UnsignedHeader unsigned_header = 1;
  if (this->_internal_has_unsigned_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.unsigned_header_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Header::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Header::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Header::GetClassData() const { return &_class_data_; }


void Header::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Header*>(&to_msg);
  auto& from = static_cast<const Header&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pb.Header)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_signature().empty()) {
    _this->_internal_set_signature(from._internal_signature());
  }
  if (from._internal_has_unsigned_header()) {
    _this->_internal_mutable_unsigned_header()->::pb::UnsignedHeader::MergeFrom(
        from._internal_unsigned_header());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Header::CopyFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Header::IsInitialized() const {
  return true;
}

void Header::InternalSwap(Header* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.signature_, lhs_arena,
      &other->_impl_.signature_, rhs_arena
  );
  swap(_impl_.unsigned_header_, other->_impl_.unsigned_header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Header::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pb_2fblock_2eproto_getter, &descriptor_table_pb_2fblock_2eproto_once,
      file_level_metadata_pb_2fblock_2eproto[1]);
}

// ===================================================================

class Block::_Internal {
 public:
  static const ::pb::Header& header(const Block* msg);
};

const ::pb::Header&
Block::_Internal::header(const Block* msg) {
  return *msg->_impl_.header_;
}
void Block::clear_transactions() {
  _impl_.transactions_.Clear();
}
Block::Block(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pb.Block)
}
Block::Block(const Block& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Block* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.transactions_){from._impl_.transactions_}
    , decltype(_impl_.header_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    _this->_impl_.header_ = new ::pb::Header(*from._impl_.header_);
  }
  // @@protoc_insertion_point(copy_constructor:pb.Block)
}

inline void Block::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.transactions_){arena}
    , decltype(_impl_.header_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Block::~Block() {
  // @@protoc_insertion_point(destructor:pb.Block)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Block::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.transactions_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.header_;
}

void Block::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Block::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.Block)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.transactions_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
    delete _impl_.header_;
  }
  _impl_.header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Block::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .pb.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .pb.Transaction transactions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_transactions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Block::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.Block)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.Header header = 1;
  if (this->_internal_has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // repeated .pb.Transaction transactions = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_transactions_size()); i < n; i++) {
    const auto& repfield = this->_internal_transactions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.Block)
  return target;
}

size_t Block::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.Block)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.Transaction transactions = 2;
  total_size += 1UL * this->_internal_transactions_size();
  for (const auto& msg : this->_impl_.transactions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .pb.Header header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.header_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Block::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Block::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Block::GetClassData() const { return &_class_data_; }


void Block::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Block*>(&to_msg);
  auto& from = static_cast<const Block&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pb.Block)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.transactions_.MergeFrom(from._impl_.transactions_);
  if (from._internal_has_header()) {
    _this->_internal_mutable_header()->::pb::Header::MergeFrom(
        from._internal_header());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Block::CopyFrom(const Block& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.Block)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Block::IsInitialized() const {
  return true;
}

void Block::InternalSwap(Block* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.transactions_.InternalSwap(&other->_impl_.transactions_);
  swap(_impl_.header_, other->_impl_.header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Block::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pb_2fblock_2eproto_getter, &descriptor_table_pb_2fblock_2eproto_once,
      file_level_metadata_pb_2fblock_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::UnsignedHeader*
Arena::CreateMaybeMessage< ::pb::UnsignedHeader >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::UnsignedHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::Header*
Arena::CreateMaybeMessage< ::pb::Header >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::Header >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::Block*
Arena::CreateMaybeMessage< ::pb::Block >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::Block >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
